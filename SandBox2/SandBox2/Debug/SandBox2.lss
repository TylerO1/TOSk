
SandBox2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000103c  000010d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000103c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e2  0080012a  0080012a  000010fa  2**0
                  ALLOC
  3 .stab         00000c84  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001fe  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00001f7e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b0  00000000  00000000  00001fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b47  00000000  00000000  0000215d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e71  00000000  00000000  00004ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e10  00000000  00000000  00005b15  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003a4  00000000  00000000  00006928  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000ce9  00000000  00000000  00006ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000113c  00000000  00000000  000079b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000130  00000000  00000000  00008af1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e3       	ldi	r30, 0x3C	; 60
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	aa e2       	ldi	r26, 0x2A	; 42
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ac 30       	cpi	r26, 0x0C	; 12
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <main>
      9e:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E>:
 }

bool CArduinoProcessor::SetReadStatus(arduinoPinNames_E PinToBeRead)
{
	// Check to see if this pin has already been set
	if (Registers[PinToBeRead].pinIsClaimed == Unclaimed)
      a6:	70 e0       	ldi	r23, 0x00	; 0
      a8:	fb 01       	movw	r30, r22
      aa:	ee 0f       	add	r30, r30
      ac:	ff 1f       	adc	r31, r31
      ae:	ee 0f       	add	r30, r30
      b0:	ff 1f       	adc	r31, r31
      b2:	ee 0f       	add	r30, r30
      b4:	ff 1f       	adc	r31, r31
      b6:	e5 5d       	subi	r30, 0xD5	; 213
      b8:	fe 4f       	sbci	r31, 0xFE	; 254
      ba:	87 81       	ldd	r24, Z+7	; 0x07
      bc:	81 11       	cpse	r24, r1
      be:	1f c0       	rjmp	.+62     	; 0xfe <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E+0x58>
	{
		// The DDR* port is set to "0" for the particular pin to be set to read
		*(Registers[PinToBeRead].DDR) &= ~( 1 << Registers[PinToBeRead].AVRlibPinWord );
      c0:	fb 01       	movw	r30, r22
      c2:	ee 0f       	add	r30, r30
      c4:	ff 1f       	adc	r31, r31
      c6:	ee 0f       	add	r30, r30
      c8:	ff 1f       	adc	r31, r31
      ca:	ee 0f       	add	r30, r30
      cc:	ff 1f       	adc	r31, r31
      ce:	e5 5d       	subi	r30, 0xD5	; 213
      d0:	fe 4f       	sbci	r31, 0xFE	; 254
      d2:	86 81       	ldd	r24, Z+6	; 0x06
      d4:	a4 81       	ldd	r26, Z+4	; 0x04
      d6:	b5 81       	ldd	r27, Z+5	; 0x05
      d8:	2c 91       	ld	r18, X
      da:	41 e0       	ldi	r20, 0x01	; 1
      dc:	50 e0       	ldi	r21, 0x00	; 0
      de:	ba 01       	movw	r22, r20
      e0:	02 c0       	rjmp	.+4      	; 0xe6 <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E+0x40>
      e2:	66 0f       	add	r22, r22
      e4:	77 1f       	adc	r23, r23
      e6:	8a 95       	dec	r24
      e8:	e2 f7       	brpl	.-8      	; 0xe2 <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E+0x3c>
      ea:	cb 01       	movw	r24, r22
      ec:	80 95       	com	r24
      ee:	90 95       	com	r25
      f0:	30 e0       	ldi	r19, 0x00	; 0
      f2:	82 23       	and	r24, r18
      f4:	93 23       	and	r25, r19
      f6:	8c 93       	st	X, r24
		
		Registers[PinToBeRead].pinIsClaimed = SetToRead;
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	87 83       	std	Z+7, r24	; 0x07
		return true;
      fc:	08 95       	ret
	}
	else
	{
		return false;
      fe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     100:	08 95       	ret

00000102 <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E>:


bool CArduinoProcessor::SetPullUpStatus( arduinoPinNames_E PinToPullUp )
{
	// Pin must be set to Read first
	if(Registers[PinToPullUp].pinIsClaimed == SetToRead)
     102:	70 e0       	ldi	r23, 0x00	; 0
     104:	fb 01       	movw	r30, r22
     106:	ee 0f       	add	r30, r30
     108:	ff 1f       	adc	r31, r31
     10a:	ee 0f       	add	r30, r30
     10c:	ff 1f       	adc	r31, r31
     10e:	ee 0f       	add	r30, r30
     110:	ff 1f       	adc	r31, r31
     112:	e5 5d       	subi	r30, 0xD5	; 213
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	87 81       	ldd	r24, Z+7	; 0x07
     118:	81 30       	cpi	r24, 0x01	; 1
     11a:	d1 f4       	brne	.+52     	; 0x150 <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E+0x4e>
	{
		*(Registers[PinToPullUp].port) |= (1 << Registers[PinToPullUp].AVRlibPinWord );
     11c:	fb 01       	movw	r30, r22
     11e:	ee 0f       	add	r30, r30
     120:	ff 1f       	adc	r31, r31
     122:	ee 0f       	add	r30, r30
     124:	ff 1f       	adc	r31, r31
     126:	ee 0f       	add	r30, r30
     128:	ff 1f       	adc	r31, r31
     12a:	e5 5d       	subi	r30, 0xD5	; 213
     12c:	fe 4f       	sbci	r31, 0xFE	; 254
     12e:	36 81       	ldd	r19, Z+6	; 0x06
     130:	a0 81       	ld	r26, Z
     132:	b1 81       	ldd	r27, Z+1	; 0x01
     134:	2c 91       	ld	r18, X
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	02 c0       	rjmp	.+4      	; 0x140 <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E+0x3e>
     13c:	88 0f       	add	r24, r24
     13e:	99 1f       	adc	r25, r25
     140:	3a 95       	dec	r19
     142:	e2 f7       	brpl	.-8      	; 0x13c <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E+0x3a>
     144:	82 2b       	or	r24, r18
     146:	8c 93       	st	X, r24
		
		Registers[PinToPullUp].pinIsClaimed = SetToPullUp;
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	87 83       	std	Z+7, r24	; 0x07
		return true;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	08 95       	ret
	}
	else
	{
		return false;
     150:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     152:	08 95       	ret

00000154 <_ZN17CArduinoProcessor14ReadDigitalPinEP17arduinoPinNames_E>:
}


int CArduinoProcessor::ReadDigitalPin(arduinoPinNames_E *PinToRead)
{
	return ( ( *(Registers[*PinToRead].pin) & (1 << Registers[*PinToRead].AVRlibPinWord) ) >> Registers[*PinToRead].AVRlibPinWord );
     154:	db 01       	movw	r26, r22
     156:	ec 91       	ld	r30, X
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	ee 0f       	add	r30, r30
     15c:	ff 1f       	adc	r31, r31
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	e5 5d       	subi	r30, 0xD5	; 213
     168:	fe 4f       	sbci	r31, 0xFE	; 254
     16a:	a2 81       	ldd	r26, Z+2	; 0x02
     16c:	b3 81       	ldd	r27, Z+3	; 0x03
     16e:	8c 91       	ld	r24, X
     170:	26 81       	ldd	r18, Z+6	; 0x06
     172:	66 81       	ldd	r22, Z+6	; 0x06
     174:	41 e0       	ldi	r20, 0x01	; 1
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	fa 01       	movw	r30, r20
     17a:	02 c0       	rjmp	.+4      	; 0x180 <_ZN17CArduinoProcessor14ReadDigitalPinEP17arduinoPinNames_E+0x2c>
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	2a 95       	dec	r18
     182:	e2 f7       	brpl	.-8      	; 0x17c <_ZN17CArduinoProcessor14ReadDigitalPinEP17arduinoPinNames_E+0x28>
     184:	9f 01       	movw	r18, r30
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	28 23       	and	r18, r24
     18a:	39 23       	and	r19, r25
     18c:	02 c0       	rjmp	.+4      	; 0x192 <_ZN17CArduinoProcessor14ReadDigitalPinEP17arduinoPinNames_E+0x3e>
     18e:	35 95       	asr	r19
     190:	27 95       	ror	r18
     192:	6a 95       	dec	r22
     194:	e2 f7       	brpl	.-8      	; 0x18e <_ZN17CArduinoProcessor14ReadDigitalPinEP17arduinoPinNames_E+0x3a>
}
     196:	82 2f       	mov	r24, r18
     198:	93 2f       	mov	r25, r19
     19a:	08 95       	ret

0000019c <_ZN17CArduinoProcessor23ReadMultipleDigitalPinsEP13portPinUser_sPh>:

void CArduinoProcessor::ReadMultipleDigitalPins(portPinUser_s *PinsToRead, uint8_t *ReadValue)
{
	switch (PinsToRead->port)
     19c:	fb 01       	movw	r30, r22
     19e:	80 81       	ld	r24, Z
     1a0:	82 30       	cpi	r24, 0x02	; 2
     1a2:	51 f0       	breq	.+20     	; 0x1b8 <_ZN17CArduinoProcessor23ReadMultipleDigitalPinsEP13portPinUser_sPh+0x1c>
     1a4:	83 30       	cpi	r24, 0x03	; 3
     1a6:	79 f0       	breq	.+30     	; 0x1c6 <_ZN17CArduinoProcessor23ReadMultipleDigitalPinsEP13portPinUser_sPh+0x2a>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	99 f4       	brne	.+38     	; 0x1d2 <_ZN17CArduinoProcessor23ReadMultipleDigitalPinsEP13portPinUser_sPh+0x36>
	{
		case e_PORTB:
		*ReadValue = (PINB & PinsToRead->pins);
     1ac:	83 b1       	in	r24, 0x03	; 3
     1ae:	91 81       	ldd	r25, Z+1	; 0x01
     1b0:	89 23       	and	r24, r25
     1b2:	fa 01       	movw	r30, r20
     1b4:	80 83       	st	Z, r24
		break;
     1b6:	08 95       	ret
		
		case e_PORTC:
		*ReadValue = (PINC & PinsToRead->pins);
     1b8:	86 b1       	in	r24, 0x06	; 6
     1ba:	fb 01       	movw	r30, r22
     1bc:	91 81       	ldd	r25, Z+1	; 0x01
     1be:	89 23       	and	r24, r25
     1c0:	fa 01       	movw	r30, r20
     1c2:	80 83       	st	Z, r24
		break;
     1c4:	08 95       	ret
		
		case e_PORTD:
		*ReadValue = (PIND & PinsToRead->pins);
     1c6:	89 b1       	in	r24, 0x09	; 9
     1c8:	fb 01       	movw	r30, r22
     1ca:	91 81       	ldd	r25, Z+1	; 0x01
     1cc:	89 23       	and	r24, r25
     1ce:	fa 01       	movw	r30, r20
     1d0:	80 83       	st	Z, r24
     1d2:	08 95       	ret

000001d4 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E>:

arduinoPortNames_E CArduinoProcessor::FindPort( arduinoPinNames_E Pin )
{
	arduinoPortNames_E Port;
	
	switch (Pin)
     1d4:	6e 30       	cpi	r22, 0x0E	; 14
     1d6:	18 f4       	brcc	.+6      	; 0x1de <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E+0xa>
     1d8:	68 30       	cpi	r22, 0x08	; 8
     1da:	50 f4       	brcc	.+20     	; 0x1f0 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E+0x1c>
     1dc:	03 c0       	rjmp	.+6      	; 0x1e4 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E+0x10>
     1de:	64 31       	cpi	r22, 0x14	; 20
     1e0:	28 f4       	brcc	.+10     	; 0x1ec <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E+0x18>
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E+0x14>
		case Pd3:
		case Pd4:
		case Pd5:
		case Pd6:
		case Pd7:
		Port = e_PORTD;
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	08 95       	ret
		case Pc1:
		case Pc2:
		case Pc3:
		case Pc4:
		case Pc5:
		Port = e_PORTC;
     1e8:	82 e0       	ldi	r24, 0x02	; 2
		break;
     1ea:	08 95       	ret
		default:
		Port = e_INVALIDPORTASSIGNMMENT;
     1ec:	84 e0       	ldi	r24, 0x04	; 4
		break;
     1ee:	08 95       	ret
		case Pb1:
		case Pb2:
		case Pb3:
		case Pb4:
		case Pb5:
		Port = e_PORTB;
     1f0:	81 e0       	ldi	r24, 0x01	; 1
		Port = e_INVALIDPORTASSIGNMMENT;
		break;
	}
	
	return Port;
}
     1f2:	08 95       	ret

000001f4 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh>:

void CArduinoProcessor::PackPinsToBitfield(arduinoPinNames_E pins[8], int *NumberOfPinsToPack, uint8_t *Bitfield)
{
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	df 92       	push	r13
     1fa:	ef 92       	push	r14
     1fc:	ff 92       	push	r15
     1fe:	0f 93       	push	r16
     200:	1f 93       	push	r17
     202:	cf 93       	push	r28
     204:	df 93       	push	r29
     206:	da 01       	movw	r26, r20
     208:	59 01       	movw	r10, r18
	arduinoPortNames_E PortUsed = e_INVALIDPORTASSIGNMMENT;
	
	for (int i = 0; i < *NumberOfPinsToPack; i++)
     20a:	8d 91       	ld	r24, X+
     20c:	9c 91       	ld	r25, X
     20e:	11 97       	sbiw	r26, 0x01	; 1
     210:	18 16       	cp	r1, r24
     212:	19 06       	cpc	r1, r25
     214:	0c f0       	brlt	.+2      	; 0x218 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x24>
     216:	c4 c0       	rjmp	.+392    	; 0x3a0 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x1ac>
     218:	e6 2f       	mov	r30, r22
     21a:	f7 2f       	mov	r31, r23
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
	return Port;
}

void CArduinoProcessor::PackPinsToBitfield(arduinoPinNames_E pins[8], int *NumberOfPinsToPack, uint8_t *Bitfield)
{
	arduinoPortNames_E PortUsed = e_INVALIDPORTASSIGNMMENT;
     220:	04 e0       	ldi	r16, 0x04	; 4
					PortUsed = e_INVALIDPORTASSIGNMMENT;
				}
			}
			else
			{
				*Bitfield = ( 1 << Registers[pins[i]].AVRlibPinWord );
     222:	21 e0       	ldi	r18, 0x01	; 1
     224:	30 e0       	ldi	r19, 0x00	; 0
				PortUsed = e_PORTC;
     226:	68 94       	set
     228:	ee 24       	eor	r14, r14
     22a:	e1 f8       	bld	r14, 1
					PortUsed = e_PORTC;
				}
				else
				{
					*Bitfield = 0;
					PortUsed = e_INVALIDPORTASSIGNMMENT;
     22c:	14 e0       	ldi	r17, 0x04	; 4
				}
			}
			else
			{
				*Bitfield = ( 1 << Registers[pins[i]].AVRlibPinWord );
				PortUsed = e_PORTB;
     22e:	ff 24       	eor	r15, r15
     230:	f3 94       	inc	r15
				}
			}
			else
			{
				*Bitfield = ( 1 << Registers[pins[i]].AVRlibPinWord );
				PortUsed = e_PORTD;
     232:	0f 2e       	mov	r0, r31
     234:	f3 e0       	ldi	r31, 0x03	; 3
     236:	df 2e       	mov	r13, r31
     238:	f0 2d       	mov	r31, r0
{
	arduinoPortNames_E PortUsed = e_INVALIDPORTASSIGNMMENT;
	
	for (int i = 0; i < *NumberOfPinsToPack; i++)
	{
		switch (pins[i])
     23a:	41 91       	ld	r20, Z+
     23c:	4e 30       	cpi	r20, 0x0E	; 14
     23e:	18 f4       	brcc	.+6      	; 0x246 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x52>
     240:	48 30       	cpi	r20, 0x08	; 8
     242:	d8 f5       	brcc	.+118    	; 0x2ba <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0xc6>
     244:	04 c0       	rjmp	.+8      	; 0x24e <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x5a>
     246:	44 31       	cpi	r20, 0x14	; 20
     248:	08 f0       	brcs	.+2      	; 0x24c <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x58>
     24a:	a2 c0       	rjmp	.+324    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
     24c:	6c c0       	rjmp	.+216    	; 0x326 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x132>
			case Pd4:
			case Pd5:
			case Pd6:
			case Pd7:
			// If this isn't the first pass
			if ( i != 0 )
     24e:	00 97       	sbiw	r24, 0x00	; 0
     250:	f9 f0       	breq	.+62     	; 0x290 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x9c>
			{
				// If the last port used is the same as this one's keep on working, otherwise exit
				if (PortUsed == e_PORTD) 
     252:	03 30       	cpi	r16, 0x03	; 3
     254:	c9 f4       	brne	.+50     	; 0x288 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x94>
				{
					*Bitfield += ( 1 << Registers[pins[i]].AVRlibPinWord);
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	44 0f       	add	r20, r20
     25a:	55 1f       	adc	r21, r21
     25c:	44 0f       	add	r20, r20
     25e:	55 1f       	adc	r21, r21
     260:	44 0f       	add	r20, r20
     262:	55 1f       	adc	r21, r21
     264:	45 5d       	subi	r20, 0xD5	; 213
     266:	5e 4f       	sbci	r21, 0xFE	; 254
     268:	ea 01       	movw	r28, r20
     26a:	4e 81       	ldd	r20, Y+6	; 0x06
     26c:	e5 01       	movw	r28, r10
     26e:	68 81       	ld	r22, Y
     270:	e9 01       	movw	r28, r18
     272:	02 c0       	rjmp	.+4      	; 0x278 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x84>
     274:	cc 0f       	add	r28, r28
     276:	dd 1f       	adc	r29, r29
     278:	4a 95       	dec	r20
     27a:	e2 f7       	brpl	.-8      	; 0x274 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x80>
     27c:	ae 01       	movw	r20, r28
     27e:	46 0f       	add	r20, r22
     280:	51 1d       	adc	r21, r1
     282:	e5 01       	movw	r28, r10
     284:	48 83       	st	Y, r20
     286:	84 c0       	rjmp	.+264    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
					PortUsed = e_PORTD;
				}
				else
				{
					*Bitfield = 0;
     288:	e5 01       	movw	r28, r10
     28a:	18 82       	st	Y, r1
					PortUsed = e_INVALIDPORTASSIGNMMENT;
     28c:	01 2f       	mov	r16, r17
     28e:	80 c0       	rjmp	.+256    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
				}
			}
			else
			{
				*Bitfield = ( 1 << Registers[pins[i]].AVRlibPinWord );
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	44 0f       	add	r20, r20
     294:	55 1f       	adc	r21, r21
     296:	44 0f       	add	r20, r20
     298:	55 1f       	adc	r21, r21
     29a:	44 0f       	add	r20, r20
     29c:	55 1f       	adc	r21, r21
     29e:	45 5d       	subi	r20, 0xD5	; 213
     2a0:	5e 4f       	sbci	r21, 0xFE	; 254
     2a2:	ea 01       	movw	r28, r20
     2a4:	4e 81       	ldd	r20, Y+6	; 0x06
     2a6:	d2 2f       	mov	r29, r18
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0xb8>
     2aa:	dd 0f       	add	r29, r29
     2ac:	4a 95       	dec	r20
     2ae:	ea f7       	brpl	.-6      	; 0x2aa <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0xb6>
     2b0:	4d 2f       	mov	r20, r29
     2b2:	e5 01       	movw	r28, r10
     2b4:	48 83       	st	Y, r20
				PortUsed = e_PORTD;
     2b6:	0d 2d       	mov	r16, r13
     2b8:	6b c0       	rjmp	.+214    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
			case Pb2:
			case Pb3:
			case Pb4:
			case Pb5:
			// If this isn't the first pass
			if ( i != 0 )
     2ba:	00 97       	sbiw	r24, 0x00	; 0
     2bc:	f9 f0       	breq	.+62     	; 0x2fc <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x108>
			{
				// If the last port used is the same as this one's keep on working, otherwise exit
				if (PortUsed == e_PORTB)
     2be:	01 30       	cpi	r16, 0x01	; 1
     2c0:	c9 f4       	brne	.+50     	; 0x2f4 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x100>
				{
					*Bitfield += ( 1 << Registers[pins[i]].AVRlibPinWord );
     2c2:	50 e0       	ldi	r21, 0x00	; 0
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	44 0f       	add	r20, r20
     2ca:	55 1f       	adc	r21, r21
     2cc:	44 0f       	add	r20, r20
     2ce:	55 1f       	adc	r21, r21
     2d0:	45 5d       	subi	r20, 0xD5	; 213
     2d2:	5e 4f       	sbci	r21, 0xFE	; 254
     2d4:	ea 01       	movw	r28, r20
     2d6:	4e 81       	ldd	r20, Y+6	; 0x06
     2d8:	e5 01       	movw	r28, r10
     2da:	68 81       	ld	r22, Y
     2dc:	e9 01       	movw	r28, r18
     2de:	02 c0       	rjmp	.+4      	; 0x2e4 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0xf0>
     2e0:	cc 0f       	add	r28, r28
     2e2:	dd 1f       	adc	r29, r29
     2e4:	4a 95       	dec	r20
     2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0xec>
     2e8:	ae 01       	movw	r20, r28
     2ea:	46 0f       	add	r20, r22
     2ec:	51 1d       	adc	r21, r1
     2ee:	e5 01       	movw	r28, r10
     2f0:	48 83       	st	Y, r20
     2f2:	4e c0       	rjmp	.+156    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
					PortUsed = e_PORTB;
				}
				else
				{
					*Bitfield = 0;
     2f4:	e5 01       	movw	r28, r10
     2f6:	18 82       	st	Y, r1
					PortUsed = e_INVALIDPORTASSIGNMMENT;
     2f8:	01 2f       	mov	r16, r17
     2fa:	4a c0       	rjmp	.+148    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
				}
			}
			else
			{
				*Bitfield = ( 1 << Registers[pins[i]].AVRlibPinWord );
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	44 0f       	add	r20, r20
     300:	55 1f       	adc	r21, r21
     302:	44 0f       	add	r20, r20
     304:	55 1f       	adc	r21, r21
     306:	44 0f       	add	r20, r20
     308:	55 1f       	adc	r21, r21
     30a:	45 5d       	subi	r20, 0xD5	; 213
     30c:	5e 4f       	sbci	r21, 0xFE	; 254
     30e:	ea 01       	movw	r28, r20
     310:	4e 81       	ldd	r20, Y+6	; 0x06
     312:	d2 2f       	mov	r29, r18
     314:	01 c0       	rjmp	.+2      	; 0x318 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x124>
     316:	dd 0f       	add	r29, r29
     318:	4a 95       	dec	r20
     31a:	ea f7       	brpl	.-6      	; 0x316 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x122>
     31c:	4d 2f       	mov	r20, r29
     31e:	e5 01       	movw	r28, r10
     320:	48 83       	st	Y, r20
				PortUsed = e_PORTB;
     322:	0f 2d       	mov	r16, r15
     324:	35 c0       	rjmp	.+106    	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
			case Pc2:
			case Pc3:
			case Pc4:
			case Pc5:
			// If this isn't the first pass
			if ( i != 0 )
     326:	00 97       	sbiw	r24, 0x00	; 0
     328:	f9 f0       	breq	.+62     	; 0x368 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x174>
			{
				// If the last port used is the same as this one's keep on working, otherwise exit
				if (PortUsed == e_PORTC)
     32a:	02 30       	cpi	r16, 0x02	; 2
     32c:	c9 f4       	brne	.+50     	; 0x360 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x16c>
				{
					*Bitfield += ( 1 << Registers[pins[i]].AVRlibPinWord );
     32e:	50 e0       	ldi	r21, 0x00	; 0
     330:	44 0f       	add	r20, r20
     332:	55 1f       	adc	r21, r21
     334:	44 0f       	add	r20, r20
     336:	55 1f       	adc	r21, r21
     338:	44 0f       	add	r20, r20
     33a:	55 1f       	adc	r21, r21
     33c:	45 5d       	subi	r20, 0xD5	; 213
     33e:	5e 4f       	sbci	r21, 0xFE	; 254
     340:	ea 01       	movw	r28, r20
     342:	4e 81       	ldd	r20, Y+6	; 0x06
     344:	e5 01       	movw	r28, r10
     346:	68 81       	ld	r22, Y
     348:	e9 01       	movw	r28, r18
     34a:	02 c0       	rjmp	.+4      	; 0x350 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x15c>
     34c:	cc 0f       	add	r28, r28
     34e:	dd 1f       	adc	r29, r29
     350:	4a 95       	dec	r20
     352:	e2 f7       	brpl	.-8      	; 0x34c <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x158>
     354:	ae 01       	movw	r20, r28
     356:	46 0f       	add	r20, r22
     358:	51 1d       	adc	r21, r1
     35a:	e5 01       	movw	r28, r10
     35c:	48 83       	st	Y, r20
     35e:	18 c0       	rjmp	.+48     	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
					PortUsed = e_PORTC;
				}
				else
				{
					*Bitfield = 0;
     360:	e5 01       	movw	r28, r10
     362:	18 82       	st	Y, r1
					PortUsed = e_INVALIDPORTASSIGNMMENT;
     364:	01 2f       	mov	r16, r17
     366:	14 c0       	rjmp	.+40     	; 0x390 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x19c>
				}
			}
			else
			{
				*Bitfield = ( 1 << Registers[pins[i]].AVRlibPinWord );
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	44 0f       	add	r20, r20
     36c:	55 1f       	adc	r21, r21
     36e:	44 0f       	add	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	44 0f       	add	r20, r20
     374:	55 1f       	adc	r21, r21
     376:	45 5d       	subi	r20, 0xD5	; 213
     378:	5e 4f       	sbci	r21, 0xFE	; 254
     37a:	ea 01       	movw	r28, r20
     37c:	4e 81       	ldd	r20, Y+6	; 0x06
     37e:	d2 2f       	mov	r29, r18
     380:	01 c0       	rjmp	.+2      	; 0x384 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x190>
     382:	dd 0f       	add	r29, r29
     384:	4a 95       	dec	r20
     386:	ea f7       	brpl	.-6      	; 0x382 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x18e>
     388:	4d 2f       	mov	r20, r29
     38a:	e5 01       	movw	r28, r10
     38c:	48 83       	st	Y, r20
				PortUsed = e_PORTC;
     38e:	0e 2d       	mov	r16, r14

void CArduinoProcessor::PackPinsToBitfield(arduinoPinNames_E pins[8], int *NumberOfPinsToPack, uint8_t *Bitfield)
{
	arduinoPortNames_E PortUsed = e_INVALIDPORTASSIGNMMENT;
	
	for (int i = 0; i < *NumberOfPinsToPack; i++)
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	6d 91       	ld	r22, X+
     394:	7c 91       	ld	r23, X
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	86 17       	cp	r24, r22
     39a:	97 07       	cpc	r25, r23
     39c:	0c f4       	brge	.+2      	; 0x3a0 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x1ac>
     39e:	4d cf       	rjmp	.-358    	; 0x23a <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh+0x46>
			break;
		}
	}
	
	return;
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	bf 90       	pop	r11
     3b0:	af 90       	pop	r10
     3b2:	08 95       	ret

000003b4 <_ZN17CArduinoProcessor9createMapEv>:

void CArduinoProcessor::createMap()
{
	if(RegistersAlreadySet== false)
     3b4:	80 91 2a 01 	lds	r24, 0x012A
     3b8:	81 11       	cpse	r24, r1
     3ba:	5b c1       	rjmp	.+694    	; 0x672 <_ZN17CArduinoProcessor9createMapEv+0x2be>
	{
		Registers[Pd0].port = &PORTD;
     3bc:	4b e2       	ldi	r20, 0x2B	; 43
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	50 93 2c 01 	sts	0x012C, r21
     3c4:	40 93 2b 01 	sts	0x012B, r20
		Registers[Pd0].pin = &PIND;
     3c8:	29 e2       	ldi	r18, 0x29	; 41
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	30 93 2e 01 	sts	0x012E, r19
     3d0:	20 93 2d 01 	sts	0x012D, r18
		Registers[Pd0].DDR = &DDRD;
     3d4:	8a e2       	ldi	r24, 0x2A	; 42
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	90 93 30 01 	sts	0x0130, r25
     3dc:	80 93 2f 01 	sts	0x012F, r24
		Registers[Pd0].AVRlibPinWord = PORTD0;
     3e0:	10 92 31 01 	sts	0x0131, r1
		Registers[Pd0].pinIsClaimed = Unclaimed;
     3e4:	10 92 32 01 	sts	0x0132, r1

		Registers[Pd1].port = &PORTD;
     3e8:	50 93 34 01 	sts	0x0134, r21
     3ec:	40 93 33 01 	sts	0x0133, r20
		Registers[Pd1].pin = &PIND;
     3f0:	30 93 36 01 	sts	0x0136, r19
     3f4:	20 93 35 01 	sts	0x0135, r18
		Registers[Pd1].DDR = &DDRD;
     3f8:	90 93 38 01 	sts	0x0138, r25
     3fc:	80 93 37 01 	sts	0x0137, r24
		Registers[Pd1].AVRlibPinWord = PORTD1;
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	60 93 39 01 	sts	0x0139, r22
		Registers[Pd1].pinIsClaimed = Unclaimed;
     406:	10 92 3a 01 	sts	0x013A, r1

		Registers[Pd2].port = &PORTD;
     40a:	50 93 3c 01 	sts	0x013C, r21
     40e:	40 93 3b 01 	sts	0x013B, r20
		Registers[Pd2].pin = &PIND;
     412:	30 93 3e 01 	sts	0x013E, r19
     416:	20 93 3d 01 	sts	0x013D, r18
		Registers[Pd2].DDR = &DDRD;
     41a:	90 93 40 01 	sts	0x0140, r25
     41e:	80 93 3f 01 	sts	0x013F, r24
		Registers[Pd2].AVRlibPinWord = PORTD2;
     422:	a2 e0       	ldi	r26, 0x02	; 2
     424:	a0 93 41 01 	sts	0x0141, r26
		Registers[Pd2].pinIsClaimed = Unclaimed;
     428:	10 92 42 01 	sts	0x0142, r1

		Registers[Pd3].port = &PORTD;
     42c:	50 93 44 01 	sts	0x0144, r21
     430:	40 93 43 01 	sts	0x0143, r20
		Registers[Pd3].pin = &PIND;
     434:	30 93 46 01 	sts	0x0146, r19
     438:	20 93 45 01 	sts	0x0145, r18
		Registers[Pd3].DDR = &DDRD;
     43c:	90 93 48 01 	sts	0x0148, r25
     440:	80 93 47 01 	sts	0x0147, r24
		Registers[Pd3].AVRlibPinWord = PORTD3;
     444:	f3 e0       	ldi	r31, 0x03	; 3
     446:	f0 93 49 01 	sts	0x0149, r31
		Registers[Pd3].pinIsClaimed = Unclaimed;
     44a:	10 92 4a 01 	sts	0x014A, r1

		Registers[Pd4].port = &PORTD;
     44e:	50 93 4c 01 	sts	0x014C, r21
     452:	40 93 4b 01 	sts	0x014B, r20
		Registers[Pd4].pin = &PIND;
     456:	30 93 4e 01 	sts	0x014E, r19
     45a:	20 93 4d 01 	sts	0x014D, r18
		Registers[Pd4].DDR = &DDRD;
     45e:	90 93 50 01 	sts	0x0150, r25
     462:	80 93 4f 01 	sts	0x014F, r24
		Registers[Pd4].AVRlibPinWord = PORTD4;
     466:	e4 e0       	ldi	r30, 0x04	; 4
     468:	e0 93 51 01 	sts	0x0151, r30
		Registers[Pd4].pinIsClaimed = Unclaimed;
     46c:	10 92 52 01 	sts	0x0152, r1

		Registers[Pd5].port = &PORTD;
     470:	50 93 54 01 	sts	0x0154, r21
     474:	40 93 53 01 	sts	0x0153, r20
		Registers[Pd5].pin = &PIND;
     478:	30 93 56 01 	sts	0x0156, r19
     47c:	20 93 55 01 	sts	0x0155, r18
		Registers[Pd5].DDR = &DDRD;
     480:	90 93 58 01 	sts	0x0158, r25
     484:	80 93 57 01 	sts	0x0157, r24
		Registers[Pd5].AVRlibPinWord = PORTD5;
     488:	75 e0       	ldi	r23, 0x05	; 5
     48a:	70 93 59 01 	sts	0x0159, r23
		Registers[Pd5].pinIsClaimed = Unclaimed;
     48e:	10 92 5a 01 	sts	0x015A, r1

		Registers[Pd6].port = &PORTD;
     492:	50 93 5c 01 	sts	0x015C, r21
     496:	40 93 5b 01 	sts	0x015B, r20
		Registers[Pd6].pin = &PIND;
     49a:	30 93 5e 01 	sts	0x015E, r19
     49e:	20 93 5d 01 	sts	0x015D, r18
		Registers[Pd6].DDR = &DDRD;
     4a2:	90 93 60 01 	sts	0x0160, r25
     4a6:	80 93 5f 01 	sts	0x015F, r24
		Registers[Pd6].AVRlibPinWord = PORTD6;
     4aa:	b6 e0       	ldi	r27, 0x06	; 6
     4ac:	b0 93 61 01 	sts	0x0161, r27
		Registers[Pd6].pinIsClaimed = Unclaimed;
     4b0:	10 92 62 01 	sts	0x0162, r1

		Registers[Pd7].port = &PORTD;
     4b4:	50 93 64 01 	sts	0x0164, r21
     4b8:	40 93 63 01 	sts	0x0163, r20
		Registers[Pd7].pin = &PIND;
     4bc:	30 93 66 01 	sts	0x0166, r19
     4c0:	20 93 65 01 	sts	0x0165, r18
		Registers[Pd7].DDR = &DDRD;
     4c4:	90 93 68 01 	sts	0x0168, r25
     4c8:	80 93 67 01 	sts	0x0167, r24
		Registers[Pd7].AVRlibPinWord = PORTD7;
     4cc:	87 e0       	ldi	r24, 0x07	; 7
     4ce:	80 93 69 01 	sts	0x0169, r24
		Registers[Pd7].pinIsClaimed = Unclaimed;
     4d2:	10 92 6a 01 	sts	0x016A, r1



		Registers[Pb0].port = &PORTB;
     4d6:	45 e2       	ldi	r20, 0x25	; 37
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	50 93 6c 01 	sts	0x016C, r21
     4de:	40 93 6b 01 	sts	0x016B, r20
		Registers[Pb0].pin = &PINB;
     4e2:	23 e2       	ldi	r18, 0x23	; 35
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	30 93 6e 01 	sts	0x016E, r19
     4ea:	20 93 6d 01 	sts	0x016D, r18
		Registers[Pb0].DDR = &DDRB;
     4ee:	84 e2       	ldi	r24, 0x24	; 36
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	90 93 70 01 	sts	0x0170, r25
     4f6:	80 93 6f 01 	sts	0x016F, r24
		Registers[Pb0].AVRlibPinWord = PORTB0;
     4fa:	10 92 71 01 	sts	0x0171, r1
		Registers[Pb0].pinIsClaimed = Unclaimed;
     4fe:	10 92 72 01 	sts	0x0172, r1

		Registers[Pb1].port = &PORTB;
     502:	50 93 74 01 	sts	0x0174, r21
     506:	40 93 73 01 	sts	0x0173, r20
		Registers[Pb1].pin = &PINB;
     50a:	30 93 76 01 	sts	0x0176, r19
     50e:	20 93 75 01 	sts	0x0175, r18
		Registers[Pb1].DDR = &DDRB;
     512:	90 93 78 01 	sts	0x0178, r25
     516:	80 93 77 01 	sts	0x0177, r24
		Registers[Pb1].AVRlibPinWord = PORTB1;
     51a:	60 93 79 01 	sts	0x0179, r22
		Registers[Pb1].pinIsClaimed = Unclaimed;
     51e:	10 92 7a 01 	sts	0x017A, r1

		Registers[Pb2].port = &PORTB;
     522:	50 93 7c 01 	sts	0x017C, r21
     526:	40 93 7b 01 	sts	0x017B, r20
		Registers[Pb2].pin = &PINB;
     52a:	30 93 7e 01 	sts	0x017E, r19
     52e:	20 93 7d 01 	sts	0x017D, r18
		Registers[Pb2].DDR = &DDRB;
     532:	90 93 80 01 	sts	0x0180, r25
     536:	80 93 7f 01 	sts	0x017F, r24
		Registers[Pb2].AVRlibPinWord = PORTB2;
     53a:	a0 93 81 01 	sts	0x0181, r26
		Registers[Pb2].pinIsClaimed = Unclaimed;
     53e:	10 92 82 01 	sts	0x0182, r1

		Registers[Pb3].port = &PORTB;
     542:	50 93 84 01 	sts	0x0184, r21
     546:	40 93 83 01 	sts	0x0183, r20
		Registers[Pb3].pin = &PINB;
     54a:	30 93 86 01 	sts	0x0186, r19
     54e:	20 93 85 01 	sts	0x0185, r18
		Registers[Pb3].DDR = &DDRB;
     552:	90 93 88 01 	sts	0x0188, r25
     556:	80 93 87 01 	sts	0x0187, r24
		Registers[Pb3].AVRlibPinWord = PORTB3;
     55a:	f0 93 89 01 	sts	0x0189, r31
		Registers[Pb3].pinIsClaimed = Unclaimed;
     55e:	10 92 8a 01 	sts	0x018A, r1

		Registers[Pb4].port = &PORTB;
     562:	50 93 8c 01 	sts	0x018C, r21
     566:	40 93 8b 01 	sts	0x018B, r20
		Registers[Pb4].pin = &PINB;
     56a:	30 93 8e 01 	sts	0x018E, r19
     56e:	20 93 8d 01 	sts	0x018D, r18
		Registers[Pb4].DDR = &DDRB;
     572:	90 93 90 01 	sts	0x0190, r25
     576:	80 93 8f 01 	sts	0x018F, r24
		Registers[Pb4].AVRlibPinWord = PORTB4;
     57a:	e0 93 91 01 	sts	0x0191, r30
		Registers[Pb4].pinIsClaimed = Unclaimed;
     57e:	10 92 92 01 	sts	0x0192, r1

		Registers[Pb5].port = &PORTB;
     582:	50 93 94 01 	sts	0x0194, r21
     586:	40 93 93 01 	sts	0x0193, r20
		Registers[Pb5].pin = &PINB;
     58a:	30 93 96 01 	sts	0x0196, r19
     58e:	20 93 95 01 	sts	0x0195, r18
		Registers[Pb5].DDR = &DDRB;
     592:	90 93 98 01 	sts	0x0198, r25
     596:	80 93 97 01 	sts	0x0197, r24
		Registers[Pb5].AVRlibPinWord = PORTB5;
     59a:	70 93 99 01 	sts	0x0199, r23
		Registers[Pb5].pinIsClaimed = Unclaimed;
     59e:	10 92 9a 01 	sts	0x019A, r1



		Registers[Pc0].port = &PORTC;
     5a2:	48 e2       	ldi	r20, 0x28	; 40
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	50 93 9c 01 	sts	0x019C, r21
     5aa:	40 93 9b 01 	sts	0x019B, r20
		Registers[Pc0].pin = &PINC;
     5ae:	26 e2       	ldi	r18, 0x26	; 38
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	30 93 9e 01 	sts	0x019E, r19
     5b6:	20 93 9d 01 	sts	0x019D, r18
		Registers[Pc0].DDR = &DDRC;
     5ba:	87 e2       	ldi	r24, 0x27	; 39
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	90 93 a0 01 	sts	0x01A0, r25
     5c2:	80 93 9f 01 	sts	0x019F, r24
		Registers[Pc0].AVRlibPinWord = PORTC0;
     5c6:	10 92 a1 01 	sts	0x01A1, r1
		Registers[Pc0].pinIsClaimed = Unclaimed;
     5ca:	10 92 a2 01 	sts	0x01A2, r1

		Registers[Pc1].port = &PORTC;
     5ce:	50 93 a4 01 	sts	0x01A4, r21
     5d2:	40 93 a3 01 	sts	0x01A3, r20
		Registers[Pc1].pin = &PINC;
     5d6:	30 93 a6 01 	sts	0x01A6, r19
     5da:	20 93 a5 01 	sts	0x01A5, r18
		Registers[Pc1].DDR = &DDRC;
     5de:	90 93 a8 01 	sts	0x01A8, r25
     5e2:	80 93 a7 01 	sts	0x01A7, r24
		Registers[Pc1].AVRlibPinWord = PORTC1;
     5e6:	60 93 a9 01 	sts	0x01A9, r22
		Registers[Pc1].pinIsClaimed = Unclaimed;
     5ea:	10 92 aa 01 	sts	0x01AA, r1

		Registers[Pc2].port = &PORTC;
     5ee:	50 93 ac 01 	sts	0x01AC, r21
     5f2:	40 93 ab 01 	sts	0x01AB, r20
		Registers[Pc2].pin = &PINC;
     5f6:	30 93 ae 01 	sts	0x01AE, r19
     5fa:	20 93 ad 01 	sts	0x01AD, r18
		Registers[Pc2].DDR = &DDRC;
     5fe:	90 93 b0 01 	sts	0x01B0, r25
     602:	80 93 af 01 	sts	0x01AF, r24
		Registers[Pc2].AVRlibPinWord = PORTC2;
     606:	a0 93 b1 01 	sts	0x01B1, r26
		Registers[Pc2].pinIsClaimed = Unclaimed;
     60a:	10 92 b2 01 	sts	0x01B2, r1

		Registers[Pc3].port = &PORTC;
     60e:	50 93 b4 01 	sts	0x01B4, r21
     612:	40 93 b3 01 	sts	0x01B3, r20
		Registers[Pc3].pin = &PINC;
     616:	30 93 b6 01 	sts	0x01B6, r19
     61a:	20 93 b5 01 	sts	0x01B5, r18
		Registers[Pc3].DDR = &DDRC;
     61e:	90 93 b8 01 	sts	0x01B8, r25
     622:	80 93 b7 01 	sts	0x01B7, r24
		Registers[Pc3].AVRlibPinWord = PORTC3;
     626:	f0 93 b9 01 	sts	0x01B9, r31
		Registers[Pc3].pinIsClaimed = Unclaimed;
     62a:	10 92 ba 01 	sts	0x01BA, r1

		Registers[Pc4].port = &PORTC;
     62e:	50 93 bc 01 	sts	0x01BC, r21
     632:	40 93 bb 01 	sts	0x01BB, r20
		Registers[Pc4].pin = &PINC;
     636:	30 93 be 01 	sts	0x01BE, r19
     63a:	20 93 bd 01 	sts	0x01BD, r18
		Registers[Pc4].DDR = &DDRC;
     63e:	90 93 c0 01 	sts	0x01C0, r25
     642:	80 93 bf 01 	sts	0x01BF, r24
		Registers[Pc4].AVRlibPinWord = PORTC4;
     646:	e0 93 c1 01 	sts	0x01C1, r30
		Registers[Pc4].pinIsClaimed = Unclaimed;
     64a:	10 92 c2 01 	sts	0x01C2, r1

		Registers[Pc5].port = &PORTC;
     64e:	50 93 c4 01 	sts	0x01C4, r21
     652:	40 93 c3 01 	sts	0x01C3, r20
		Registers[Pc5].pin = &PINC;
     656:	30 93 c6 01 	sts	0x01C6, r19
     65a:	20 93 c5 01 	sts	0x01C5, r18
		Registers[Pc5].DDR = &DDRC;
     65e:	90 93 c8 01 	sts	0x01C8, r25
     662:	80 93 c7 01 	sts	0x01C7, r24
		Registers[Pc5].AVRlibPinWord = PORTC5;
     666:	70 93 c9 01 	sts	0x01C9, r23
		Registers[Pc5].pinIsClaimed = Unclaimed;
     66a:	10 92 ca 01 	sts	0x01CA, r1
		
		RegistersAlreadySet = true;
     66e:	60 93 2a 01 	sts	0x012A, r22
     672:	08 95       	ret

00000674 <_ZN17CArduinoProcessorC1Ev>:
//External functions

 CArduinoProcessor::CArduinoProcessor( void )
 {
	// Set up the Pin Register Map
	createMap();
     674:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN17CArduinoProcessor9createMapEv>
     678:	08 95       	ret

0000067a <_ZN7CButtonC1E17arduinoPinNames_E>:
{
	ButtonFailureState = BUTTON_INITIALIZED_INCORRECTLY;
	ButtonStatus = BUTTON_ERROR;
}

 CButton::CButton( arduinoPinNames_E A )
     67a:	1f 93       	push	r17
     67c:	cf 93       	push	r28
     67e:	df 93       	push	r29
     680:	ec 01       	movw	r28, r24
     682:	16 2f       	mov	r17, r22
#ifdef __AVR_ATmega328P__ //Duemilanove and Uno
#include "ATmega328P.h"
#endif


class CArduinoInterface : public CArduinoProcessor
     684:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN17CArduinoProcessorC1Ev>
{
	ButtonPin = A;
     688:	1a 83       	std	Y+2, r17	; 0x02
	
	if (this->SetReadStatus(ButtonPin) == false)
     68a:	61 2f       	mov	r22, r17
     68c:	ce 01       	movw	r24, r28
     68e:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E>
     692:	81 11       	cpse	r24, r1
     694:	04 c0       	rjmp	.+8      	; 0x69e <_ZN7CButtonC1E17arduinoPinNames_E+0x24>
	{
		ButtonFailureState = BUTTON_PIN_ALREADY_CLAIMED;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	88 83       	st	Y, r24
		ButtonStatus = BUTTON_ERROR;
     69a:	19 82       	std	Y+1, r1	; 0x01
     69c:	0b c0       	rjmp	.+22     	; 0x6b4 <_ZN7CButtonC1E17arduinoPinNames_E+0x3a>
	}
	else if(this->SetPullUpStatus(ButtonPin) == false)
     69e:	6a 81       	ldd	r22, Y+2	; 0x02
     6a0:	ce 01       	movw	r24, r28
     6a2:	0e 94 81 00 	call	0x102	; 0x102 <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E>
     6a6:	81 11       	cpse	r24, r1
     6a8:	04 c0       	rjmp	.+8      	; 0x6b2 <_ZN7CButtonC1E17arduinoPinNames_E+0x38>
	{
		ButtonFailureState = BUTTON_PIN_ALREADY_CLAIMED;
     6aa:	82 e0       	ldi	r24, 0x02	; 2
     6ac:	88 83       	st	Y, r24
		ButtonStatus = BUTTON_ERROR;
     6ae:	19 82       	std	Y+1, r1	; 0x01
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <_ZN7CButtonC1E17arduinoPinNames_E+0x3a>
	}
	else
	{
		ButtonFailureState = BUTTON_NO_FAILURE;
     6b2:	18 82       	st	Y, r1
	}
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret

000006bc <_ZN7CButton10ReadButtonEv>:

void CButton::ReadButton( void )
{
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
	if (ButtonFailureState == BUTTON_NO_FAILURE)
     6c2:	88 81       	ld	r24, Y
     6c4:	81 11       	cpse	r24, r1
     6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <_ZN7CButton10ReadButtonEv+0x26>
	{
		if (this->ReadDigitalPin(&ButtonPin) == 0)
     6c8:	be 01       	movw	r22, r28
     6ca:	6e 5f       	subi	r22, 0xFE	; 254
     6cc:	7f 4f       	sbci	r23, 0xFF	; 255
     6ce:	ce 01       	movw	r24, r28
     6d0:	0e 94 aa 00 	call	0x154	; 0x154 <_ZN17CArduinoProcessor14ReadDigitalPinEP17arduinoPinNames_E>
     6d4:	89 2b       	or	r24, r25
     6d6:	19 f4       	brne	.+6      	; 0x6de <_ZN7CButton10ReadButtonEv+0x22>
		{
			ButtonStatus = BUTTON_PRESSED;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	89 83       	std	Y+1, r24	; 0x01
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <_ZN7CButton10ReadButtonEv+0x26>
		} 
		else
		{
			ButtonStatus = BUTTON_RELEASED;
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	89 83       	std	Y+1, r24	; 0x01
		}
		
	}
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <_ZN7CButton14GetButtonStateEv>:

ButtonStates CButton::GetButtonState( void )
{
	static ButtonStates Output;
	
	if (ButtonFailureState != BUTTON_NO_FAILURE)
     6e8:	fc 01       	movw	r30, r24
     6ea:	20 81       	ld	r18, Z
     6ec:	22 23       	and	r18, r18
     6ee:	19 f0       	breq	.+6      	; 0x6f6 <_ZN7CButton14GetButtonStateEv+0xe>
	{
		Output = BUTTON_ERROR;
     6f0:	10 92 cb 01 	sts	0x01CB, r1
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <_ZN7CButton14GetButtonStateEv+0x16>
	} 
	else
	{
		Output = ButtonStatus;
     6f6:	fc 01       	movw	r30, r24
     6f8:	81 81       	ldd	r24, Z+1	; 0x01
     6fa:	80 93 cb 01 	sts	0x01CB, r24
	}
	
	return Output;
	
     6fe:	80 91 cb 01 	lds	r24, 0x01CB
     702:	08 95       	ret

00000704 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_>:
CRotaryEncoder::CRotaryEncoder()
{
	EncoderFailureState =ENCODER_INITIALIZED_INCORRECTLY;
}

CRotaryEncoder::CRotaryEncoder(arduinoPinNames_E A, arduinoPinNames_E B)
     704:	ef 92       	push	r14
     706:	ff 92       	push	r15
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	2a 97       	sbiw	r28, 0x0a	; 10
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	8c 01       	movw	r16, r24
     722:	f6 2e       	mov	r15, r22
     724:	e4 2e       	mov	r14, r20
     726:	0e 94 3a 03 	call	0x674	; 0x674 <_ZN17CArduinoProcessorC1Ev>
     72a:	f8 01       	movw	r30, r16
     72c:	17 82       	std	Z+7, r1	; 0x07
{
	arduinoPinNames_E CreateBitfield[8];
	int NumberOfPinsForBitfield = 2;
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	9a 87       	std	Y+10, r25	; 0x0a
     734:	89 87       	std	Y+9, r24	; 0x09
	
	pinA = A;
     736:	f1 82       	std	Z+1, r15	; 0x01
	pinB = B;
     738:	e2 82       	std	Z+2, r14	; 0x02
	
	// Check for errors, if none then assign the pins to Encoder_input
	if (this->FindPort(pinA) != this->FindPort(pinB))
     73a:	6f 2d       	mov	r22, r15
     73c:	c8 01       	movw	r24, r16
     73e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E>
     742:	f8 2e       	mov	r15, r24
     744:	f8 01       	movw	r30, r16
     746:	62 81       	ldd	r22, Z+2	; 0x02
     748:	c8 01       	movw	r24, r16
     74a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E>
     74e:	f8 16       	cp	r15, r24
     750:	21 f0       	breq	.+8      	; 0x75a <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0x56>
	{
		EncoderFailureState = ENCODER_PINS_NOT_ON_SAME_PORT;
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	f8 01       	movw	r30, r16
     756:	80 83       	st	Z, r24
     758:	47 c0       	rjmp	.+142    	; 0x7e8 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0xe4>
	}
	else if (this->SetReadStatus(pinA) == false)
     75a:	f8 01       	movw	r30, r16
     75c:	61 81       	ldd	r22, Z+1	; 0x01
     75e:	c8 01       	movw	r24, r16
     760:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E>
     764:	81 11       	cpse	r24, r1
     766:	04 c0       	rjmp	.+8      	; 0x770 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0x6c>
	{
		EncoderFailureState = ENCODER_PIN_ALREADY_CLAIMED;
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	f8 01       	movw	r30, r16
     76c:	80 83       	st	Z, r24
     76e:	3c c0       	rjmp	.+120    	; 0x7e8 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0xe4>
	}
	else if (this->SetPullUpStatus(pinA) == false)
     770:	f8 01       	movw	r30, r16
     772:	61 81       	ldd	r22, Z+1	; 0x01
     774:	c8 01       	movw	r24, r16
     776:	0e 94 81 00 	call	0x102	; 0x102 <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E>
     77a:	81 11       	cpse	r24, r1
     77c:	04 c0       	rjmp	.+8      	; 0x786 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0x82>
	{
		EncoderFailureState = ENCODER_PIN_ALREADY_CLAIMED;
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	f8 01       	movw	r30, r16
     782:	80 83       	st	Z, r24
     784:	31 c0       	rjmp	.+98     	; 0x7e8 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0xe4>
	}
	else if (this->SetReadStatus(pinB) == false)
     786:	f8 01       	movw	r30, r16
     788:	62 81       	ldd	r22, Z+2	; 0x02
     78a:	c8 01       	movw	r24, r16
     78c:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN17CArduinoProcessor13SetReadStatusE17arduinoPinNames_E>
     790:	81 11       	cpse	r24, r1
     792:	04 c0       	rjmp	.+8      	; 0x79c <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0x98>
	{
		EncoderFailureState = ENCODER_PIN_ALREADY_CLAIMED;
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	f8 01       	movw	r30, r16
     798:	80 83       	st	Z, r24
     79a:	26 c0       	rjmp	.+76     	; 0x7e8 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0xe4>
	}
	else if (this->SetPullUpStatus(pinB) == false)
     79c:	f8 01       	movw	r30, r16
     79e:	62 81       	ldd	r22, Z+2	; 0x02
     7a0:	c8 01       	movw	r24, r16
     7a2:	0e 94 81 00 	call	0x102	; 0x102 <_ZN17CArduinoProcessor15SetPullUpStatusE17arduinoPinNames_E>
     7a6:	81 11       	cpse	r24, r1
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0xae>
	{
		EncoderFailureState = ENCODER_PIN_ALREADY_CLAIMED;
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	f8 01       	movw	r30, r16
     7ae:	80 83       	st	Z, r24
     7b0:	1b c0       	rjmp	.+54     	; 0x7e8 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_+0xe4>
	}
	else
	{
		EncoderFailureState = ENCODER_NO_FAILURE;
     7b2:	f8 01       	movw	r30, r16
     7b4:	10 82       	st	Z, r1
		Encoder_input.port = this->FindPort(pinA);
     7b6:	61 81       	ldd	r22, Z+1	; 0x01
     7b8:	c8 01       	movw	r24, r16
     7ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN17CArduinoProcessor8FindPortE17arduinoPinNames_E>
     7be:	f8 01       	movw	r30, r16
     7c0:	83 83       	std	Z+3, r24	; 0x03
		CreateBitfield[0] = pinA;
     7c2:	81 81       	ldd	r24, Z+1	; 0x01
     7c4:	89 83       	std	Y+1, r24	; 0x01
		CreateBitfield[1] = pinB;
     7c6:	82 81       	ldd	r24, Z+2	; 0x02
     7c8:	8a 83       	std	Y+2, r24	; 0x02
		this->PackPinsToBitfield(CreateBitfield, &NumberOfPinsForBitfield, &Encoder_input.pins);
     7ca:	98 01       	movw	r18, r16
     7cc:	2c 5f       	subi	r18, 0xFC	; 252
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	ae 01       	movw	r20, r28
     7d2:	47 5f       	subi	r20, 0xF7	; 247
     7d4:	5f 4f       	sbci	r21, 0xFF	; 255
     7d6:	be 01       	movw	r22, r28
     7d8:	6f 5f       	subi	r22, 0xFF	; 255
     7da:	7f 4f       	sbci	r23, 0xFF	; 255
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <_ZN17CArduinoProcessor18PackPinsToBitfieldEP17arduinoPinNames_EPiPh>
		
		EncoderPosition = 0;	
     7e2:	f8 01       	movw	r30, r16
     7e4:	16 82       	std	Z+6, r1	; 0x06
     7e6:	15 82       	std	Z+5, r1	; 0x05
	}
}
     7e8:	2a 96       	adiw	r28, 0x0a	; 10
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	ef 90       	pop	r14
     800:	08 95       	ret

00000802 <_ZN14CRotaryEncoder11ReadEncoderEv>:

void CRotaryEncoder::ReadEncoder( void )
{
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	1f 92       	push	r1
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	8c 01       	movw	r16, r24
	uint8_t CurrentReading;
	uint8_t Pin1State;
	uint8_t Pin2State;
	
	
	if (EncoderFailureState == ENCODER_NO_FAILURE)
     812:	dc 01       	movw	r26, r24
     814:	8c 91       	ld	r24, X
     816:	81 11       	cpse	r24, r1
     818:	61 c0       	rjmp	.+194    	; 0x8dc <_ZN14CRotaryEncoder11ReadEncoderEv+0xda>
	{
		this->ReadMultipleDigitalPins(&Encoder_input, &CurrentReading);
     81a:	b8 01       	movw	r22, r16
     81c:	6d 5f       	subi	r22, 0xFD	; 253
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	ae 01       	movw	r20, r28
     822:	4f 5f       	subi	r20, 0xFF	; 255
     824:	5f 4f       	sbci	r21, 0xFF	; 255
     826:	c8 01       	movw	r24, r16
     828:	0e 94 ce 00 	call	0x19c	; 0x19c <_ZN17CArduinoProcessor23ReadMultipleDigitalPinsEP13portPinUser_sPh>
		
		Pin1State = ( ( CurrentReading & ( 1 << Registers[pinA].AVRlibPinWord ) ) >> Registers[pinA].AVRlibPinWord );
     82c:	89 81       	ldd	r24, Y+1	; 0x01
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	d8 01       	movw	r26, r16
     832:	11 96       	adiw	r26, 0x01	; 1
     834:	ec 91       	ld	r30, X
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	e5 5d       	subi	r30, 0xD5	; 213
     846:	fe 4f       	sbci	r31, 0xFE	; 254
     848:	46 81       	ldd	r20, Z+6	; 0x06
     84a:	a6 81       	ldd	r26, Z+6	; 0x06
		Pin2State = ( ( CurrentReading & ( 1 << Registers[pinB].AVRlibPinWord ) ) >> Registers[pinB].AVRlibPinWord );
     84c:	f8 01       	movw	r30, r16
     84e:	22 81       	ldd	r18, Z+2	; 0x02
     850:	e2 2f       	mov	r30, r18
     852:	f0 e0       	ldi	r31, 0x00	; 0
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 0f       	add	r30, r30
     85a:	ff 1f       	adc	r31, r31
     85c:	ee 0f       	add	r30, r30
     85e:	ff 1f       	adc	r31, r31
     860:	e5 5d       	subi	r30, 0xD5	; 213
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	76 81       	ldd	r23, Z+6	; 0x06
     866:	66 81       	ldd	r22, Z+6	; 0x06
	
	if (EncoderFailureState == ENCODER_NO_FAILURE)
	{
		this->ReadMultipleDigitalPins(&Encoder_input, &CurrentReading);
		
		Pin1State = ( ( CurrentReading & ( 1 << Registers[pinA].AVRlibPinWord ) ) >> Registers[pinA].AVRlibPinWord );
     868:	21 e0       	ldi	r18, 0x01	; 1
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	f9 01       	movw	r30, r18
     86e:	02 c0       	rjmp	.+4      	; 0x874 <_ZN14CRotaryEncoder11ReadEncoderEv+0x72>
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	4a 95       	dec	r20
     876:	e2 f7       	brpl	.-8      	; 0x870 <_ZN14CRotaryEncoder11ReadEncoderEv+0x6e>
     878:	af 01       	movw	r20, r30
     87a:	48 23       	and	r20, r24
     87c:	59 23       	and	r21, r25
     87e:	02 c0       	rjmp	.+4      	; 0x884 <_ZN14CRotaryEncoder11ReadEncoderEv+0x82>
     880:	55 95       	asr	r21
     882:	47 95       	ror	r20
     884:	aa 95       	dec	r26
     886:	e2 f7       	brpl	.-8      	; 0x880 <_ZN14CRotaryEncoder11ReadEncoderEv+0x7e>
		Pin2State = ( ( CurrentReading & ( 1 << Registers[pinB].AVRlibPinWord ) ) >> Registers[pinB].AVRlibPinWord );
		
		OldReading <<= 2;
     888:	d8 01       	movw	r26, r16
     88a:	17 96       	adiw	r26, 0x07	; 7
     88c:	ec 91       	ld	r30, X
     88e:	17 97       	sbiw	r26, 0x07	; 7
     890:	ee 0f       	add	r30, r30
     892:	ee 0f       	add	r30, r30
		OldReading |= (Pin1State | (Pin2State << 1) );
     894:	4e 2b       	or	r20, r30
	if (EncoderFailureState == ENCODER_NO_FAILURE)
	{
		this->ReadMultipleDigitalPins(&Encoder_input, &CurrentReading);
		
		Pin1State = ( ( CurrentReading & ( 1 << Registers[pinA].AVRlibPinWord ) ) >> Registers[pinA].AVRlibPinWord );
		Pin2State = ( ( CurrentReading & ( 1 << Registers[pinB].AVRlibPinWord ) ) >> Registers[pinB].AVRlibPinWord );
     896:	02 c0       	rjmp	.+4      	; 0x89c <_ZN14CRotaryEncoder11ReadEncoderEv+0x9a>
     898:	22 0f       	add	r18, r18
     89a:	33 1f       	adc	r19, r19
     89c:	7a 95       	dec	r23
     89e:	e2 f7       	brpl	.-8      	; 0x898 <_ZN14CRotaryEncoder11ReadEncoderEv+0x96>
     8a0:	82 23       	and	r24, r18
     8a2:	93 23       	and	r25, r19
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <_ZN14CRotaryEncoder11ReadEncoderEv+0xa8>
     8a6:	95 95       	asr	r25
     8a8:	87 95       	ror	r24
     8aa:	6a 95       	dec	r22
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <_ZN14CRotaryEncoder11ReadEncoderEv+0xa4>
		
		OldReading <<= 2;
		OldReading |= (Pin1State | (Pin2State << 1) );
     8ae:	88 0f       	add	r24, r24
     8b0:	48 2b       	or	r20, r24
     8b2:	17 96       	adiw	r26, 0x07	; 7
     8b4:	4c 93       	st	X, r20
     8b6:	17 97       	sbiw	r26, 0x07	; 7
		
		EncoderPosition += enc_states[OldReading & 0x0f];
     8b8:	15 96       	adiw	r26, 0x05	; 5
     8ba:	8d 91       	ld	r24, X+
     8bc:	9c 91       	ld	r25, X
     8be:	16 97       	sbiw	r26, 0x06	; 6
     8c0:	4f 70       	andi	r20, 0x0F	; 15
     8c2:	e4 2f       	mov	r30, r20
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	e0 50       	subi	r30, 0x00	; 0
     8c8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ca:	20 81       	ld	r18, Z
     8cc:	82 0f       	add	r24, r18
     8ce:	91 1d       	adc	r25, r1
     8d0:	27 fd       	sbrc	r18, 7
     8d2:	9a 95       	dec	r25
     8d4:	16 96       	adiw	r26, 0x06	; 6
     8d6:	9c 93       	st	X, r25
     8d8:	8e 93       	st	-X, r24
     8da:	15 97       	sbiw	r26, 0x05	; 5
	}
}
     8dc:	0f 90       	pop	r0
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	1f 91       	pop	r17
     8e4:	0f 91       	pop	r16
     8e6:	08 95       	ret

000008e8 <_ZN14CRotaryEncoder15GetEncoderLevelEv>:

int CRotaryEncoder::GetEncoderLevel()
{	
	
	return EncoderPosition;
     8e8:	fc 01       	movw	r30, r24
     8ea:	25 81       	ldd	r18, Z+5	; 0x05
     8ec:	36 81       	ldd	r19, Z+6	; 0x06
     8ee:	82 2f       	mov	r24, r18
     8f0:	93 2f       	mov	r25, r19
     8f2:	08 95       	ret

000008f4 <main>:
#include "usart.h"
#include "RotaryEncoder.h"
#include "Button.h"

int main(void)
{
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	e0 97       	sbiw	r28, 0x30	; 48
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
	USART_Init(MYUBRR); // Initializes the serial communication
     908:	80 e1       	ldi	r24, 0x10	; 16
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 25 05 	call	0xa4a	; 0xa4a <_Z10USART_Initj>
	// Initialize room volume knobs
	CRotaryEncoder EncoderRoom1(Pb0, Pb1);
     910:	49 e0       	ldi	r20, 0x09	; 9
     912:	68 e0       	ldi	r22, 0x08	; 8
     914:	ce 01       	movw	r24, r28
     916:	49 96       	adiw	r24, 0x19	; 25
     918:	0e 94 82 03 	call	0x704	; 0x704 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_>
	CButton		ButtonRoom1(Pb2);
     91c:	6a e0       	ldi	r22, 0x0A	; 10
     91e:	ce 01       	movw	r24, r28
     920:	8d 96       	adiw	r24, 0x2d	; 45
     922:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN7CButtonC1E17arduinoPinNames_E>

	CRotaryEncoder EncoderRoom2(Pb3, Pb4);
     926:	4c e0       	ldi	r20, 0x0C	; 12
     928:	6b e0       	ldi	r22, 0x0B	; 11
     92a:	ce 01       	movw	r24, r28
     92c:	41 96       	adiw	r24, 0x11	; 17
     92e:	0e 94 82 03 	call	0x704	; 0x704 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_>
	CButton		ButtonRoom2(Pb5);
     932:	6d e0       	ldi	r22, 0x0D	; 13
     934:	ce 01       	movw	r24, r28
     936:	89 96       	adiw	r24, 0x29	; 41
     938:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN7CButtonC1E17arduinoPinNames_E>

	CRotaryEncoder EncoderRoom3(Pb0, Pb1);
     93c:	49 e0       	ldi	r20, 0x09	; 9
     93e:	68 e0       	ldi	r22, 0x08	; 8
     940:	ce 01       	movw	r24, r28
     942:	09 96       	adiw	r24, 0x09	; 9
     944:	0e 94 82 03 	call	0x704	; 0x704 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_>
	CButton		ButtonRoom3(Pb2);
     948:	6a e0       	ldi	r22, 0x0A	; 10
     94a:	ce 01       	movw	r24, r28
     94c:	85 96       	adiw	r24, 0x25	; 37
     94e:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN7CButtonC1E17arduinoPinNames_E>

	CRotaryEncoder EncoderRoom4(Pb0, Pb1);
     952:	49 e0       	ldi	r20, 0x09	; 9
     954:	68 e0       	ldi	r22, 0x08	; 8
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 82 03 	call	0x704	; 0x704 <_ZN14CRotaryEncoderC1E17arduinoPinNames_ES0_>
	CButton		ButtonRoom4(Pb2);
     95e:	6a e0       	ldi	r22, 0x0A	; 10
     960:	ce 01       	movw	r24, r28
     962:	81 96       	adiw	r24, 0x21	; 33
     964:	0e 94 3d 03 	call	0x67a	; 0x67a <_ZN7CButtonC1E17arduinoPinNames_E>
		
		sprintf(string, "%d %d %d %d %d %d %d %d \n", 
		EncoderRoom1.GetEncoderLevel(), ButtonRoom1.GetButtonState(), 
		EncoderRoom2.GetEncoderLevel(), ButtonRoom2.GetButtonState(),
		EncoderRoom3.GetEncoderLevel(), ButtonRoom3.GetButtonState(),
		EncoderRoom4.GetEncoderLevel(), ButtonRoom4.GetButtonState());
     968:	0f 2e       	mov	r0, r31
     96a:	f0 e1       	ldi	r31, 0x10	; 16
     96c:	ef 2e       	mov	r14, r31
     96e:	f1 e0       	ldi	r31, 0x01	; 1
     970:	ff 2e       	mov	r15, r31
     972:	f0 2d       	mov	r31, r0
     974:	0c ec       	ldi	r16, 0xCC	; 204
     976:	11 e0       	ldi	r17, 0x01	; 1
			
	
    while(1)
    {
		// Read Volume knob states
		EncoderRoom1.ReadEncoder();
     978:	ce 01       	movw	r24, r28
     97a:	49 96       	adiw	r24, 0x19	; 25
     97c:	0e 94 01 04 	call	0x802	; 0x802 <_ZN14CRotaryEncoder11ReadEncoderEv>
		ButtonRoom1.ReadButton();
     980:	ce 01       	movw	r24, r28
     982:	8d 96       	adiw	r24, 0x2d	; 45
     984:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN7CButton10ReadButtonEv>
		
		EncoderRoom2.ReadEncoder();
     988:	ce 01       	movw	r24, r28
     98a:	41 96       	adiw	r24, 0x11	; 17
     98c:	0e 94 01 04 	call	0x802	; 0x802 <_ZN14CRotaryEncoder11ReadEncoderEv>
		ButtonRoom2.ReadButton();
     990:	ce 01       	movw	r24, r28
     992:	89 96       	adiw	r24, 0x29	; 41
     994:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN7CButton10ReadButtonEv>
		
		EncoderRoom3.ReadEncoder();
     998:	ce 01       	movw	r24, r28
     99a:	09 96       	adiw	r24, 0x09	; 9
     99c:	0e 94 01 04 	call	0x802	; 0x802 <_ZN14CRotaryEncoder11ReadEncoderEv>
		ButtonRoom3.ReadButton();
     9a0:	ce 01       	movw	r24, r28
     9a2:	85 96       	adiw	r24, 0x25	; 37
     9a4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN7CButton10ReadButtonEv>
		
		EncoderRoom4.ReadEncoder();
     9a8:	ce 01       	movw	r24, r28
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	0e 94 01 04 	call	0x802	; 0x802 <_ZN14CRotaryEncoder11ReadEncoderEv>
		ButtonRoom4.ReadButton();
     9b0:	ce 01       	movw	r24, r28
     9b2:	81 96       	adiw	r24, 0x21	; 33
     9b4:	0e 94 5e 03 	call	0x6bc	; 0x6bc <_ZN7CButton10ReadButtonEv>
		
		sprintf(string, "%d %d %d %d %d %d %d %d \n", 
		EncoderRoom1.GetEncoderLevel(), ButtonRoom1.GetButtonState(), 
		EncoderRoom2.GetEncoderLevel(), ButtonRoom2.GetButtonState(),
		EncoderRoom3.GetEncoderLevel(), ButtonRoom3.GetButtonState(),
		EncoderRoom4.GetEncoderLevel(), ButtonRoom4.GetButtonState());
     9b8:	ce 01       	movw	r24, r28
     9ba:	81 96       	adiw	r24, 0x21	; 33
     9bc:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN7CButton14GetButtonStateEv>
     9c0:	48 2e       	mov	r4, r24
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN14CRotaryEncoder15GetEncoderLevelEv>
     9ca:	68 2e       	mov	r6, r24
     9cc:	59 2e       	mov	r5, r25
		
		
		sprintf(string, "%d %d %d %d %d %d %d %d \n", 
		EncoderRoom1.GetEncoderLevel(), ButtonRoom1.GetButtonState(), 
		EncoderRoom2.GetEncoderLevel(), ButtonRoom2.GetButtonState(),
		EncoderRoom3.GetEncoderLevel(), ButtonRoom3.GetButtonState(),
     9ce:	ce 01       	movw	r24, r28
     9d0:	85 96       	adiw	r24, 0x25	; 37
     9d2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN7CButton14GetButtonStateEv>
     9d6:	78 2e       	mov	r7, r24
		EncoderRoom4.GetEncoderLevel(), ButtonRoom4.GetButtonState());
     9d8:	ce 01       	movw	r24, r28
     9da:	09 96       	adiw	r24, 0x09	; 9
     9dc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN14CRotaryEncoder15GetEncoderLevelEv>
     9e0:	98 2e       	mov	r9, r24
     9e2:	89 2e       	mov	r8, r25
		ButtonRoom4.ReadButton();
		
		
		sprintf(string, "%d %d %d %d %d %d %d %d \n", 
		EncoderRoom1.GetEncoderLevel(), ButtonRoom1.GetButtonState(), 
		EncoderRoom2.GetEncoderLevel(), ButtonRoom2.GetButtonState(),
     9e4:	ce 01       	movw	r24, r28
     9e6:	89 96       	adiw	r24, 0x29	; 41
     9e8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN7CButton14GetButtonStateEv>
     9ec:	a8 2e       	mov	r10, r24
		EncoderRoom3.GetEncoderLevel(), ButtonRoom3.GetButtonState(),
		EncoderRoom4.GetEncoderLevel(), ButtonRoom4.GetButtonState());
     9ee:	ce 01       	movw	r24, r28
     9f0:	41 96       	adiw	r24, 0x11	; 17
     9f2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN14CRotaryEncoder15GetEncoderLevelEv>
     9f6:	c8 2e       	mov	r12, r24
     9f8:	b9 2e       	mov	r11, r25
		EncoderRoom4.ReadEncoder();
		ButtonRoom4.ReadButton();
		
		
		sprintf(string, "%d %d %d %d %d %d %d %d \n", 
		EncoderRoom1.GetEncoderLevel(), ButtonRoom1.GetButtonState(), 
     9fa:	ce 01       	movw	r24, r28
     9fc:	8d 96       	adiw	r24, 0x2d	; 45
     9fe:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN7CButton14GetButtonStateEv>
     a02:	d8 2e       	mov	r13, r24
		EncoderRoom2.GetEncoderLevel(), ButtonRoom2.GetButtonState(),
		EncoderRoom3.GetEncoderLevel(), ButtonRoom3.GetButtonState(),
		EncoderRoom4.GetEncoderLevel(), ButtonRoom4.GetButtonState());
     a04:	ce 01       	movw	r24, r28
     a06:	49 96       	adiw	r24, 0x19	; 25
     a08:	0e 94 74 04 	call	0x8e8	; 0x8e8 <_ZN14CRotaryEncoder15GetEncoderLevelEv>
     a0c:	1f 92       	push	r1
     a0e:	4f 92       	push	r4
     a10:	5f 92       	push	r5
     a12:	6f 92       	push	r6
     a14:	1f 92       	push	r1
     a16:	7f 92       	push	r7
     a18:	8f 92       	push	r8
     a1a:	9f 92       	push	r9
     a1c:	1f 92       	push	r1
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	1f 92       	push	r1
     a26:	df 92       	push	r13
     a28:	9f 93       	push	r25
     a2a:	8f 93       	push	r24
     a2c:	ff 92       	push	r15
     a2e:	ef 92       	push	r14
     a30:	1f 93       	push	r17
     a32:	0f 93       	push	r16
     a34:	0e 94 47 05 	call	0xa8e	; 0xa8e <sprintf>
		USART_Send_string(string);
     a38:	c8 01       	movw	r24, r16
     a3a:	0e 94 38 05 	call	0xa70	; 0xa70 <_Z17USART_Send_stringPKc>
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	f8 94       	cli
     a42:	de bf       	out	0x3e, r29	; 62
     a44:	0f be       	out	0x3f, r0	; 63
     a46:	cd bf       	out	0x3d, r28	; 61
     a48:	97 cf       	rjmp	.-210    	; 0x978 <__stack+0x79>

00000a4a <_Z10USART_Initj>:
#include <stdio.h>			// Conversions

void USART_Init( unsigned int ubrr)
{
/*Set baud rate */
UBRR0H = (unsigned char)(ubrr>>8);
     a4a:	90 93 c5 00 	sts	0x00C5, r25
UBRR0L = (unsigned char)ubrr;
     a4e:	80 93 c4 00 	sts	0x00C4, r24
//Enable receiver and transmitter */
UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     a52:	88 e1       	ldi	r24, 0x18	; 24
     a54:	80 93 c1 00 	sts	0x00C1, r24
/* Set frame format: 8data, 2stop bit */
UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     a58:	8e e0       	ldi	r24, 0x0E	; 14
     a5a:	80 93 c2 00 	sts	0x00C2, r24
     a5e:	08 95       	ret

00000a60 <_Z14USART_Sendbyteh>:


void USART_Sendbyte( unsigned char data )
{
/* Wait for empty transmit buffer */
while ( !( UCSR0A & (1<<UDRE0)) )
     a60:	e0 ec       	ldi	r30, 0xC0	; 192
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	90 81       	ld	r25, Z
     a66:	95 ff       	sbrs	r25, 5
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <_Z14USART_Sendbyteh+0x4>
;
/* Put data into buffer, sends the data */
UDR0 = char(data);
     a6a:	80 93 c6 00 	sts	0x00C6, r24
     a6e:	08 95       	ret

00000a70 <_Z17USART_Send_stringPKc>:
}

void USART_Send_string(const char *str)
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
     a74:	ec 01       	movw	r28, r24

	  while (*str) 
     a76:	88 81       	ld	r24, Y
     a78:	88 23       	and	r24, r24
     a7a:	31 f0       	breq	.+12     	; 0xa88 <_Z17USART_Send_stringPKc+0x18>
;
/* Put data into buffer, sends the data */
UDR0 = char(data);
}

void USART_Send_string(const char *str)
     a7c:	21 96       	adiw	r28, 0x01	; 1
{

	  while (*str) 
      USART_Sendbyte(*str++);
     a7e:	0e 94 30 05 	call	0xa60	; 0xa60 <_Z14USART_Sendbyteh>
}

void USART_Send_string(const char *str)
{

	  while (*str) 
     a82:	89 91       	ld	r24, Y+
     a84:	81 11       	cpse	r24, r1
     a86:	fb cf       	rjmp	.-10     	; 0xa7e <_Z17USART_Send_stringPKc+0xe>
      USART_Sendbyte(*str++);
	
}
     a88:	df 91       	pop	r29
     a8a:	cf 91       	pop	r28
     a8c:	08 95       	ret

00000a8e <sprintf>:
     a8e:	ae e0       	ldi	r26, 0x0E	; 14
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	ed e4       	ldi	r30, 0x4D	; 77
     a94:	f5 e0       	ldi	r31, 0x05	; 5
     a96:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__prologue_saves__+0x1c>
     a9a:	0d 89       	ldd	r16, Y+21	; 0x15
     a9c:	1e 89       	ldd	r17, Y+22	; 0x16
     a9e:	86 e0       	ldi	r24, 0x06	; 6
     aa0:	8c 83       	std	Y+4, r24	; 0x04
     aa2:	1a 83       	std	Y+2, r17	; 0x02
     aa4:	09 83       	std	Y+1, r16	; 0x01
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	9f e7       	ldi	r25, 0x7F	; 127
     aaa:	9e 83       	std	Y+6, r25	; 0x06
     aac:	8d 83       	std	Y+5, r24	; 0x05
     aae:	ce 01       	movw	r24, r28
     ab0:	49 96       	adiw	r24, 0x19	; 25
     ab2:	ac 01       	movw	r20, r24
     ab4:	6f 89       	ldd	r22, Y+23	; 0x17
     ab6:	78 8d       	ldd	r23, Y+24	; 0x18
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 69 05 	call	0xad2	; 0xad2 <vfprintf>
     ac0:	ef 81       	ldd	r30, Y+7	; 0x07
     ac2:	f8 85       	ldd	r31, Y+8	; 0x08
     ac4:	e0 0f       	add	r30, r16
     ac6:	f1 1f       	adc	r31, r17
     ac8:	10 82       	st	Z, r1
     aca:	2e 96       	adiw	r28, 0x0e	; 14
     acc:	e4 e0       	ldi	r30, 0x04	; 4
     ace:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__epilogue_restores__+0x1c>

00000ad2 <vfprintf>:
     ad2:	ac e0       	ldi	r26, 0x0C	; 12
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	ef e6       	ldi	r30, 0x6F	; 111
     ad8:	f5 e0       	ldi	r31, 0x05	; 5
     ada:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__prologue_saves__>
     ade:	7c 01       	movw	r14, r24
     ae0:	6b 01       	movw	r12, r22
     ae2:	8a 01       	movw	r16, r20
     ae4:	fc 01       	movw	r30, r24
     ae6:	17 82       	std	Z+7, r1	; 0x07
     ae8:	16 82       	std	Z+6, r1	; 0x06
     aea:	83 81       	ldd	r24, Z+3	; 0x03
     aec:	81 ff       	sbrs	r24, 1
     aee:	c6 c1       	rjmp	.+908    	; 0xe7c <vfprintf+0x3aa>
     af0:	88 24       	eor	r8, r8
     af2:	83 94       	inc	r8
     af4:	91 2c       	mov	r9, r1
     af6:	8c 0e       	add	r8, r28
     af8:	9d 1e       	adc	r9, r29
     afa:	f7 01       	movw	r30, r14
     afc:	93 81       	ldd	r25, Z+3	; 0x03
     afe:	f6 01       	movw	r30, r12
     b00:	93 fd       	sbrc	r25, 3
     b02:	85 91       	lpm	r24, Z+
     b04:	93 ff       	sbrs	r25, 3
     b06:	81 91       	ld	r24, Z+
     b08:	6f 01       	movw	r12, r30
     b0a:	88 23       	and	r24, r24
     b0c:	09 f4       	brne	.+2      	; 0xb10 <vfprintf+0x3e>
     b0e:	b2 c1       	rjmp	.+868    	; 0xe74 <vfprintf+0x3a2>
     b10:	85 32       	cpi	r24, 0x25	; 37
     b12:	39 f4       	brne	.+14     	; 0xb22 <vfprintf+0x50>
     b14:	93 fd       	sbrc	r25, 3
     b16:	85 91       	lpm	r24, Z+
     b18:	93 ff       	sbrs	r25, 3
     b1a:	81 91       	ld	r24, Z+
     b1c:	6f 01       	movw	r12, r30
     b1e:	85 32       	cpi	r24, 0x25	; 37
     b20:	29 f4       	brne	.+10     	; 0xb2c <vfprintf+0x5a>
     b22:	b7 01       	movw	r22, r14
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     b2a:	e7 cf       	rjmp	.-50     	; 0xafa <vfprintf+0x28>
     b2c:	51 2c       	mov	r5, r1
     b2e:	31 2c       	mov	r3, r1
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	20 32       	cpi	r18, 0x20	; 32
     b34:	a8 f4       	brcc	.+42     	; 0xb60 <vfprintf+0x8e>
     b36:	8b 32       	cpi	r24, 0x2B	; 43
     b38:	61 f0       	breq	.+24     	; 0xb52 <vfprintf+0x80>
     b3a:	28 f4       	brcc	.+10     	; 0xb46 <vfprintf+0x74>
     b3c:	80 32       	cpi	r24, 0x20	; 32
     b3e:	51 f0       	breq	.+20     	; 0xb54 <vfprintf+0x82>
     b40:	83 32       	cpi	r24, 0x23	; 35
     b42:	71 f4       	brne	.+28     	; 0xb60 <vfprintf+0x8e>
     b44:	0b c0       	rjmp	.+22     	; 0xb5c <vfprintf+0x8a>
     b46:	8d 32       	cpi	r24, 0x2D	; 45
     b48:	39 f0       	breq	.+14     	; 0xb58 <vfprintf+0x86>
     b4a:	80 33       	cpi	r24, 0x30	; 48
     b4c:	49 f4       	brne	.+18     	; 0xb60 <vfprintf+0x8e>
     b4e:	21 60       	ori	r18, 0x01	; 1
     b50:	28 c0       	rjmp	.+80     	; 0xba2 <vfprintf+0xd0>
     b52:	22 60       	ori	r18, 0x02	; 2
     b54:	24 60       	ori	r18, 0x04	; 4
     b56:	25 c0       	rjmp	.+74     	; 0xba2 <vfprintf+0xd0>
     b58:	28 60       	ori	r18, 0x08	; 8
     b5a:	23 c0       	rjmp	.+70     	; 0xba2 <vfprintf+0xd0>
     b5c:	20 61       	ori	r18, 0x10	; 16
     b5e:	21 c0       	rjmp	.+66     	; 0xba2 <vfprintf+0xd0>
     b60:	27 fd       	sbrc	r18, 7
     b62:	27 c0       	rjmp	.+78     	; 0xbb2 <vfprintf+0xe0>
     b64:	38 2f       	mov	r19, r24
     b66:	30 53       	subi	r19, 0x30	; 48
     b68:	3a 30       	cpi	r19, 0x0A	; 10
     b6a:	78 f4       	brcc	.+30     	; 0xb8a <vfprintf+0xb8>
     b6c:	26 ff       	sbrs	r18, 6
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <vfprintf+0xaa>
     b70:	fa e0       	ldi	r31, 0x0A	; 10
     b72:	5f 9e       	mul	r5, r31
     b74:	30 0d       	add	r19, r0
     b76:	11 24       	eor	r1, r1
     b78:	53 2e       	mov	r5, r19
     b7a:	13 c0       	rjmp	.+38     	; 0xba2 <vfprintf+0xd0>
     b7c:	8a e0       	ldi	r24, 0x0A	; 10
     b7e:	38 9e       	mul	r3, r24
     b80:	30 0d       	add	r19, r0
     b82:	11 24       	eor	r1, r1
     b84:	33 2e       	mov	r3, r19
     b86:	20 62       	ori	r18, 0x20	; 32
     b88:	0c c0       	rjmp	.+24     	; 0xba2 <vfprintf+0xd0>
     b8a:	8e 32       	cpi	r24, 0x2E	; 46
     b8c:	21 f4       	brne	.+8      	; 0xb96 <vfprintf+0xc4>
     b8e:	26 fd       	sbrc	r18, 6
     b90:	71 c1       	rjmp	.+738    	; 0xe74 <vfprintf+0x3a2>
     b92:	20 64       	ori	r18, 0x40	; 64
     b94:	06 c0       	rjmp	.+12     	; 0xba2 <vfprintf+0xd0>
     b96:	8c 36       	cpi	r24, 0x6C	; 108
     b98:	11 f4       	brne	.+4      	; 0xb9e <vfprintf+0xcc>
     b9a:	20 68       	ori	r18, 0x80	; 128
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <vfprintf+0xd0>
     b9e:	88 36       	cpi	r24, 0x68	; 104
     ba0:	41 f4       	brne	.+16     	; 0xbb2 <vfprintf+0xe0>
     ba2:	f6 01       	movw	r30, r12
     ba4:	93 fd       	sbrc	r25, 3
     ba6:	85 91       	lpm	r24, Z+
     ba8:	93 ff       	sbrs	r25, 3
     baa:	81 91       	ld	r24, Z+
     bac:	6f 01       	movw	r12, r30
     bae:	81 11       	cpse	r24, r1
     bb0:	c0 cf       	rjmp	.-128    	; 0xb32 <vfprintf+0x60>
     bb2:	98 2f       	mov	r25, r24
     bb4:	95 54       	subi	r25, 0x45	; 69
     bb6:	93 30       	cpi	r25, 0x03	; 3
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <vfprintf+0xee>
     bba:	90 52       	subi	r25, 0x20	; 32
     bbc:	93 30       	cpi	r25, 0x03	; 3
     bbe:	28 f4       	brcc	.+10     	; 0xbca <vfprintf+0xf8>
     bc0:	0c 5f       	subi	r16, 0xFC	; 252
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	ff e3       	ldi	r31, 0x3F	; 63
     bc6:	f9 83       	std	Y+1, r31	; 0x01
     bc8:	0d c0       	rjmp	.+26     	; 0xbe4 <vfprintf+0x112>
     bca:	83 36       	cpi	r24, 0x63	; 99
     bcc:	31 f0       	breq	.+12     	; 0xbda <vfprintf+0x108>
     bce:	83 37       	cpi	r24, 0x73	; 115
     bd0:	71 f0       	breq	.+28     	; 0xbee <vfprintf+0x11c>
     bd2:	83 35       	cpi	r24, 0x53	; 83
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <vfprintf+0x106>
     bd6:	5e c0       	rjmp	.+188    	; 0xc94 <vfprintf+0x1c2>
     bd8:	23 c0       	rjmp	.+70     	; 0xc20 <vfprintf+0x14e>
     bda:	f8 01       	movw	r30, r16
     bdc:	80 81       	ld	r24, Z
     bde:	89 83       	std	Y+1, r24	; 0x01
     be0:	0e 5f       	subi	r16, 0xFE	; 254
     be2:	1f 4f       	sbci	r17, 0xFF	; 255
     be4:	44 24       	eor	r4, r4
     be6:	43 94       	inc	r4
     be8:	51 2c       	mov	r5, r1
     bea:	54 01       	movw	r10, r8
     bec:	15 c0       	rjmp	.+42     	; 0xc18 <vfprintf+0x146>
     bee:	38 01       	movw	r6, r16
     bf0:	f2 e0       	ldi	r31, 0x02	; 2
     bf2:	6f 0e       	add	r6, r31
     bf4:	71 1c       	adc	r7, r1
     bf6:	f8 01       	movw	r30, r16
     bf8:	a0 80       	ld	r10, Z
     bfa:	b1 80       	ldd	r11, Z+1	; 0x01
     bfc:	26 ff       	sbrs	r18, 6
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <vfprintf+0x134>
     c00:	65 2d       	mov	r22, r5
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	02 c0       	rjmp	.+4      	; 0xc0a <vfprintf+0x138>
     c06:	6f ef       	ldi	r22, 0xFF	; 255
     c08:	7f ef       	ldi	r23, 0xFF	; 255
     c0a:	c5 01       	movw	r24, r10
     c0c:	2c 87       	std	Y+12, r18	; 0x0c
     c0e:	0e 94 50 07 	call	0xea0	; 0xea0 <strnlen>
     c12:	2c 01       	movw	r4, r24
     c14:	83 01       	movw	r16, r6
     c16:	2c 85       	ldd	r18, Y+12	; 0x0c
     c18:	6f e7       	ldi	r22, 0x7F	; 127
     c1a:	26 2e       	mov	r2, r22
     c1c:	22 22       	and	r2, r18
     c1e:	18 c0       	rjmp	.+48     	; 0xc50 <vfprintf+0x17e>
     c20:	38 01       	movw	r6, r16
     c22:	f2 e0       	ldi	r31, 0x02	; 2
     c24:	6f 0e       	add	r6, r31
     c26:	71 1c       	adc	r7, r1
     c28:	f8 01       	movw	r30, r16
     c2a:	a0 80       	ld	r10, Z
     c2c:	b1 80       	ldd	r11, Z+1	; 0x01
     c2e:	26 ff       	sbrs	r18, 6
     c30:	03 c0       	rjmp	.+6      	; 0xc38 <vfprintf+0x166>
     c32:	65 2d       	mov	r22, r5
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x16a>
     c38:	6f ef       	ldi	r22, 0xFF	; 255
     c3a:	7f ef       	ldi	r23, 0xFF	; 255
     c3c:	c5 01       	movw	r24, r10
     c3e:	2c 87       	std	Y+12, r18	; 0x0c
     c40:	0e 94 45 07 	call	0xe8a	; 0xe8a <strnlen_P>
     c44:	2c 01       	movw	r4, r24
     c46:	2c 85       	ldd	r18, Y+12	; 0x0c
     c48:	50 e8       	ldi	r21, 0x80	; 128
     c4a:	25 2e       	mov	r2, r21
     c4c:	22 2a       	or	r2, r18
     c4e:	83 01       	movw	r16, r6
     c50:	23 fc       	sbrc	r2, 3
     c52:	1c c0       	rjmp	.+56     	; 0xc8c <vfprintf+0x1ba>
     c54:	06 c0       	rjmp	.+12     	; 0xc62 <vfprintf+0x190>
     c56:	b7 01       	movw	r22, r14
     c58:	80 e2       	ldi	r24, 0x20	; 32
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     c60:	3a 94       	dec	r3
     c62:	83 2d       	mov	r24, r3
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	48 16       	cp	r4, r24
     c68:	59 06       	cpc	r5, r25
     c6a:	a8 f3       	brcs	.-22     	; 0xc56 <vfprintf+0x184>
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <vfprintf+0x1ba>
     c6e:	f5 01       	movw	r30, r10
     c70:	27 fc       	sbrc	r2, 7
     c72:	85 91       	lpm	r24, Z+
     c74:	27 fe       	sbrs	r2, 7
     c76:	81 91       	ld	r24, Z+
     c78:	5f 01       	movw	r10, r30
     c7a:	b7 01       	movw	r22, r14
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     c82:	31 10       	cpse	r3, r1
     c84:	3a 94       	dec	r3
     c86:	f1 e0       	ldi	r31, 0x01	; 1
     c88:	4f 1a       	sub	r4, r31
     c8a:	51 08       	sbc	r5, r1
     c8c:	41 14       	cp	r4, r1
     c8e:	51 04       	cpc	r5, r1
     c90:	71 f7       	brne	.-36     	; 0xc6e <vfprintf+0x19c>
     c92:	ed c0       	rjmp	.+474    	; 0xe6e <vfprintf+0x39c>
     c94:	84 36       	cpi	r24, 0x64	; 100
     c96:	11 f0       	breq	.+4      	; 0xc9c <vfprintf+0x1ca>
     c98:	89 36       	cpi	r24, 0x69	; 105
     c9a:	41 f5       	brne	.+80     	; 0xcec <vfprintf+0x21a>
     c9c:	f8 01       	movw	r30, r16
     c9e:	27 ff       	sbrs	r18, 7
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <vfprintf+0x1de>
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	0c 5f       	subi	r16, 0xFC	; 252
     cac:	1f 4f       	sbci	r17, 0xFF	; 255
     cae:	08 c0       	rjmp	.+16     	; 0xcc0 <vfprintf+0x1ee>
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	88 27       	eor	r24, r24
     cb6:	77 fd       	sbrc	r23, 7
     cb8:	80 95       	com	r24
     cba:	98 2f       	mov	r25, r24
     cbc:	0e 5f       	subi	r16, 0xFE	; 254
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	4f e6       	ldi	r20, 0x6F	; 111
     cc2:	b4 2e       	mov	r11, r20
     cc4:	b2 22       	and	r11, r18
     cc6:	97 ff       	sbrs	r25, 7
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <vfprintf+0x20a>
     cca:	90 95       	com	r25
     ccc:	80 95       	com	r24
     cce:	70 95       	com	r23
     cd0:	61 95       	neg	r22
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	8f 4f       	sbci	r24, 0xFF	; 255
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	f0 e8       	ldi	r31, 0x80	; 128
     cda:	bf 2a       	or	r11, r31
     cdc:	2a e0       	ldi	r18, 0x0A	; 10
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	a4 01       	movw	r20, r8
     ce2:	0e 94 87 07 	call	0xf0e	; 0xf0e <__ultoa_invert>
     ce6:	a8 2e       	mov	r10, r24
     ce8:	a8 18       	sub	r10, r8
     cea:	43 c0       	rjmp	.+134    	; 0xd72 <vfprintf+0x2a0>
     cec:	85 37       	cpi	r24, 0x75	; 117
     cee:	31 f4       	brne	.+12     	; 0xcfc <vfprintf+0x22a>
     cf0:	3f ee       	ldi	r19, 0xEF	; 239
     cf2:	b3 2e       	mov	r11, r19
     cf4:	b2 22       	and	r11, r18
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	24 c0       	rjmp	.+72     	; 0xd44 <vfprintf+0x272>
     cfc:	99 ef       	ldi	r25, 0xF9	; 249
     cfe:	b9 2e       	mov	r11, r25
     d00:	b2 22       	and	r11, r18
     d02:	8f 36       	cpi	r24, 0x6F	; 111
     d04:	b9 f0       	breq	.+46     	; 0xd34 <vfprintf+0x262>
     d06:	20 f4       	brcc	.+8      	; 0xd10 <vfprintf+0x23e>
     d08:	88 35       	cpi	r24, 0x58	; 88
     d0a:	09 f0       	breq	.+2      	; 0xd0e <vfprintf+0x23c>
     d0c:	b3 c0       	rjmp	.+358    	; 0xe74 <vfprintf+0x3a2>
     d0e:	0d c0       	rjmp	.+26     	; 0xd2a <vfprintf+0x258>
     d10:	80 37       	cpi	r24, 0x70	; 112
     d12:	21 f0       	breq	.+8      	; 0xd1c <vfprintf+0x24a>
     d14:	88 37       	cpi	r24, 0x78	; 120
     d16:	09 f0       	breq	.+2      	; 0xd1a <vfprintf+0x248>
     d18:	ad c0       	rjmp	.+346    	; 0xe74 <vfprintf+0x3a2>
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x24e>
     d1c:	20 e1       	ldi	r18, 0x10	; 16
     d1e:	b2 2a       	or	r11, r18
     d20:	b4 fe       	sbrs	r11, 4
     d22:	0b c0       	rjmp	.+22     	; 0xd3a <vfprintf+0x268>
     d24:	84 e0       	ldi	r24, 0x04	; 4
     d26:	b8 2a       	or	r11, r24
     d28:	08 c0       	rjmp	.+16     	; 0xd3a <vfprintf+0x268>
     d2a:	24 ff       	sbrs	r18, 4
     d2c:	09 c0       	rjmp	.+18     	; 0xd40 <vfprintf+0x26e>
     d2e:	e6 e0       	ldi	r30, 0x06	; 6
     d30:	be 2a       	or	r11, r30
     d32:	06 c0       	rjmp	.+12     	; 0xd40 <vfprintf+0x26e>
     d34:	28 e0       	ldi	r18, 0x08	; 8
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	05 c0       	rjmp	.+10     	; 0xd44 <vfprintf+0x272>
     d3a:	20 e1       	ldi	r18, 0x10	; 16
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x272>
     d40:	20 e1       	ldi	r18, 0x10	; 16
     d42:	32 e0       	ldi	r19, 0x02	; 2
     d44:	f8 01       	movw	r30, r16
     d46:	b7 fe       	sbrs	r11, 7
     d48:	07 c0       	rjmp	.+14     	; 0xd58 <vfprintf+0x286>
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	0c 5f       	subi	r16, 0xFC	; 252
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	06 c0       	rjmp	.+12     	; 0xd64 <vfprintf+0x292>
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 5f       	subi	r16, 0xFE	; 254
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	a4 01       	movw	r20, r8
     d66:	0e 94 87 07 	call	0xf0e	; 0xf0e <__ultoa_invert>
     d6a:	a8 2e       	mov	r10, r24
     d6c:	a8 18       	sub	r10, r8
     d6e:	ff e7       	ldi	r31, 0x7F	; 127
     d70:	bf 22       	and	r11, r31
     d72:	b6 fe       	sbrs	r11, 6
     d74:	0b c0       	rjmp	.+22     	; 0xd8c <vfprintf+0x2ba>
     d76:	2b 2d       	mov	r18, r11
     d78:	2e 7f       	andi	r18, 0xFE	; 254
     d7a:	a5 14       	cp	r10, r5
     d7c:	50 f4       	brcc	.+20     	; 0xd92 <vfprintf+0x2c0>
     d7e:	b4 fe       	sbrs	r11, 4
     d80:	0a c0       	rjmp	.+20     	; 0xd96 <vfprintf+0x2c4>
     d82:	b2 fc       	sbrc	r11, 2
     d84:	08 c0       	rjmp	.+16     	; 0xd96 <vfprintf+0x2c4>
     d86:	2b 2d       	mov	r18, r11
     d88:	2e 7e       	andi	r18, 0xEE	; 238
     d8a:	05 c0       	rjmp	.+10     	; 0xd96 <vfprintf+0x2c4>
     d8c:	7a 2c       	mov	r7, r10
     d8e:	2b 2d       	mov	r18, r11
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x2c6>
     d92:	7a 2c       	mov	r7, r10
     d94:	01 c0       	rjmp	.+2      	; 0xd98 <vfprintf+0x2c6>
     d96:	75 2c       	mov	r7, r5
     d98:	24 ff       	sbrs	r18, 4
     d9a:	0d c0       	rjmp	.+26     	; 0xdb6 <vfprintf+0x2e4>
     d9c:	fe 01       	movw	r30, r28
     d9e:	ea 0d       	add	r30, r10
     da0:	f1 1d       	adc	r31, r1
     da2:	80 81       	ld	r24, Z
     da4:	80 33       	cpi	r24, 0x30	; 48
     da6:	11 f4       	brne	.+4      	; 0xdac <vfprintf+0x2da>
     da8:	29 7e       	andi	r18, 0xE9	; 233
     daa:	09 c0       	rjmp	.+18     	; 0xdbe <vfprintf+0x2ec>
     dac:	22 ff       	sbrs	r18, 2
     dae:	06 c0       	rjmp	.+12     	; 0xdbc <vfprintf+0x2ea>
     db0:	73 94       	inc	r7
     db2:	73 94       	inc	r7
     db4:	04 c0       	rjmp	.+8      	; 0xdbe <vfprintf+0x2ec>
     db6:	82 2f       	mov	r24, r18
     db8:	86 78       	andi	r24, 0x86	; 134
     dba:	09 f0       	breq	.+2      	; 0xdbe <vfprintf+0x2ec>
     dbc:	73 94       	inc	r7
     dbe:	23 fd       	sbrc	r18, 3
     dc0:	14 c0       	rjmp	.+40     	; 0xdea <vfprintf+0x318>
     dc2:	20 ff       	sbrs	r18, 0
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <vfprintf+0x312>
     dc6:	5a 2c       	mov	r5, r10
     dc8:	73 14       	cp	r7, r3
     dca:	60 f4       	brcc	.+24     	; 0xde4 <vfprintf+0x312>
     dcc:	53 0c       	add	r5, r3
     dce:	57 18       	sub	r5, r7
     dd0:	73 2c       	mov	r7, r3
     dd2:	08 c0       	rjmp	.+16     	; 0xde4 <vfprintf+0x312>
     dd4:	b7 01       	movw	r22, r14
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	2c 87       	std	Y+12, r18	; 0x0c
     ddc:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     de0:	73 94       	inc	r7
     de2:	2c 85       	ldd	r18, Y+12	; 0x0c
     de4:	73 14       	cp	r7, r3
     de6:	b0 f3       	brcs	.-20     	; 0xdd4 <vfprintf+0x302>
     de8:	04 c0       	rjmp	.+8      	; 0xdf2 <vfprintf+0x320>
     dea:	73 14       	cp	r7, r3
     dec:	10 f4       	brcc	.+4      	; 0xdf2 <vfprintf+0x320>
     dee:	37 18       	sub	r3, r7
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <vfprintf+0x322>
     df2:	31 2c       	mov	r3, r1
     df4:	24 ff       	sbrs	r18, 4
     df6:	12 c0       	rjmp	.+36     	; 0xe1c <vfprintf+0x34a>
     df8:	b7 01       	movw	r22, r14
     dfa:	80 e3       	ldi	r24, 0x30	; 48
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	2c 87       	std	Y+12, r18	; 0x0c
     e00:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     e04:	2c 85       	ldd	r18, Y+12	; 0x0c
     e06:	22 ff       	sbrs	r18, 2
     e08:	1e c0       	rjmp	.+60     	; 0xe46 <vfprintf+0x374>
     e0a:	21 ff       	sbrs	r18, 1
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <vfprintf+0x342>
     e0e:	88 e5       	ldi	r24, 0x58	; 88
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <vfprintf+0x346>
     e14:	88 e7       	ldi	r24, 0x78	; 120
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	b7 01       	movw	r22, r14
     e1a:	0c c0       	rjmp	.+24     	; 0xe34 <vfprintf+0x362>
     e1c:	82 2f       	mov	r24, r18
     e1e:	86 78       	andi	r24, 0x86	; 134
     e20:	91 f0       	breq	.+36     	; 0xe46 <vfprintf+0x374>
     e22:	21 fd       	sbrc	r18, 1
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <vfprintf+0x358>
     e26:	80 e2       	ldi	r24, 0x20	; 32
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <vfprintf+0x35a>
     e2a:	8b e2       	ldi	r24, 0x2B	; 43
     e2c:	27 fd       	sbrc	r18, 7
     e2e:	8d e2       	ldi	r24, 0x2D	; 45
     e30:	b7 01       	movw	r22, r14
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <vfprintf+0x374>
     e3a:	b7 01       	movw	r22, r14
     e3c:	80 e3       	ldi	r24, 0x30	; 48
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     e44:	5a 94       	dec	r5
     e46:	a5 14       	cp	r10, r5
     e48:	c0 f3       	brcs	.-16     	; 0xe3a <vfprintf+0x368>
     e4a:	aa 94       	dec	r10
     e4c:	f4 01       	movw	r30, r8
     e4e:	ea 0d       	add	r30, r10
     e50:	f1 1d       	adc	r31, r1
     e52:	b7 01       	movw	r22, r14
     e54:	80 81       	ld	r24, Z
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     e5c:	a1 10       	cpse	r10, r1
     e5e:	f5 cf       	rjmp	.-22     	; 0xe4a <vfprintf+0x378>
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0x39c>
     e62:	b7 01       	movw	r22, r14
     e64:	80 e2       	ldi	r24, 0x20	; 32
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <fputc>
     e6c:	3a 94       	dec	r3
     e6e:	31 10       	cpse	r3, r1
     e70:	f8 cf       	rjmp	.-16     	; 0xe62 <vfprintf+0x390>
     e72:	43 ce       	rjmp	.-890    	; 0xafa <vfprintf+0x28>
     e74:	f7 01       	movw	r30, r14
     e76:	26 81       	ldd	r18, Z+6	; 0x06
     e78:	37 81       	ldd	r19, Z+7	; 0x07
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <vfprintf+0x3ae>
     e7c:	2f ef       	ldi	r18, 0xFF	; 255
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	c9 01       	movw	r24, r18
     e82:	2c 96       	adiw	r28, 0x0c	; 12
     e84:	e2 e1       	ldi	r30, 0x12	; 18
     e86:	0c 94 01 08 	jmp	0x1002	; 0x1002 <__epilogue_restores__>

00000e8a <strnlen_P>:
     e8a:	fc 01       	movw	r30, r24
     e8c:	05 90       	lpm	r0, Z+
     e8e:	61 50       	subi	r22, 0x01	; 1
     e90:	70 40       	sbci	r23, 0x00	; 0
     e92:	01 10       	cpse	r0, r1
     e94:	d8 f7       	brcc	.-10     	; 0xe8c <strnlen_P+0x2>
     e96:	80 95       	com	r24
     e98:	90 95       	com	r25
     e9a:	8e 0f       	add	r24, r30
     e9c:	9f 1f       	adc	r25, r31
     e9e:	08 95       	ret

00000ea0 <strnlen>:
     ea0:	fc 01       	movw	r30, r24
     ea2:	61 50       	subi	r22, 0x01	; 1
     ea4:	70 40       	sbci	r23, 0x00	; 0
     ea6:	01 90       	ld	r0, Z+
     ea8:	01 10       	cpse	r0, r1
     eaa:	d8 f7       	brcc	.-10     	; 0xea2 <strnlen+0x2>
     eac:	80 95       	com	r24
     eae:	90 95       	com	r25
     eb0:	8e 0f       	add	r24, r30
     eb2:	9f 1f       	adc	r25, r31
     eb4:	08 95       	ret

00000eb6 <fputc>:
     eb6:	0f 93       	push	r16
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	8c 01       	movw	r16, r24
     ec0:	eb 01       	movw	r28, r22
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	81 fd       	sbrc	r24, 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <fputc+0x18>
     ec8:	0f ef       	ldi	r16, 0xFF	; 255
     eca:	1f ef       	ldi	r17, 0xFF	; 255
     ecc:	1a c0       	rjmp	.+52     	; 0xf02 <fputc+0x4c>
     ece:	82 ff       	sbrs	r24, 2
     ed0:	0d c0       	rjmp	.+26     	; 0xeec <fputc+0x36>
     ed2:	2e 81       	ldd	r18, Y+6	; 0x06
     ed4:	3f 81       	ldd	r19, Y+7	; 0x07
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	64 f4       	brge	.+24     	; 0xef8 <fputc+0x42>
     ee0:	e8 81       	ld	r30, Y
     ee2:	f9 81       	ldd	r31, Y+1	; 0x01
     ee4:	01 93       	st	Z+, r16
     ee6:	f9 83       	std	Y+1, r31	; 0x01
     ee8:	e8 83       	st	Y, r30
     eea:	06 c0       	rjmp	.+12     	; 0xef8 <fputc+0x42>
     eec:	e8 85       	ldd	r30, Y+8	; 0x08
     eee:	f9 85       	ldd	r31, Y+9	; 0x09
     ef0:	80 2f       	mov	r24, r16
     ef2:	09 95       	icall
     ef4:	89 2b       	or	r24, r25
     ef6:	41 f7       	brne	.-48     	; 0xec8 <fputc+0x12>
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	01 96       	adiw	r24, 0x01	; 1
     efe:	9f 83       	std	Y+7, r25	; 0x07
     f00:	8e 83       	std	Y+6, r24	; 0x06
     f02:	c8 01       	movw	r24, r16
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <__ultoa_invert>:
     f0e:	fa 01       	movw	r30, r20
     f10:	aa 27       	eor	r26, r26
     f12:	28 30       	cpi	r18, 0x08	; 8
     f14:	51 f1       	breq	.+84     	; 0xf6a <__ultoa_invert+0x5c>
     f16:	20 31       	cpi	r18, 0x10	; 16
     f18:	81 f1       	breq	.+96     	; 0xf7a <__ultoa_invert+0x6c>
     f1a:	e8 94       	clt
     f1c:	6f 93       	push	r22
     f1e:	6e 7f       	andi	r22, 0xFE	; 254
     f20:	6e 5f       	subi	r22, 0xFE	; 254
     f22:	7f 4f       	sbci	r23, 0xFF	; 255
     f24:	8f 4f       	sbci	r24, 0xFF	; 255
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	af 4f       	sbci	r26, 0xFF	; 255
     f2a:	b1 e0       	ldi	r27, 0x01	; 1
     f2c:	3e d0       	rcall	.+124    	; 0xfaa <__ultoa_invert+0x9c>
     f2e:	b4 e0       	ldi	r27, 0x04	; 4
     f30:	3c d0       	rcall	.+120    	; 0xfaa <__ultoa_invert+0x9c>
     f32:	67 0f       	add	r22, r23
     f34:	78 1f       	adc	r23, r24
     f36:	89 1f       	adc	r24, r25
     f38:	9a 1f       	adc	r25, r26
     f3a:	a1 1d       	adc	r26, r1
     f3c:	68 0f       	add	r22, r24
     f3e:	79 1f       	adc	r23, r25
     f40:	8a 1f       	adc	r24, r26
     f42:	91 1d       	adc	r25, r1
     f44:	a1 1d       	adc	r26, r1
     f46:	6a 0f       	add	r22, r26
     f48:	71 1d       	adc	r23, r1
     f4a:	81 1d       	adc	r24, r1
     f4c:	91 1d       	adc	r25, r1
     f4e:	a1 1d       	adc	r26, r1
     f50:	20 d0       	rcall	.+64     	; 0xf92 <__ultoa_invert+0x84>
     f52:	09 f4       	brne	.+2      	; 0xf56 <__ultoa_invert+0x48>
     f54:	68 94       	set
     f56:	3f 91       	pop	r19
     f58:	2a e0       	ldi	r18, 0x0A	; 10
     f5a:	26 9f       	mul	r18, r22
     f5c:	11 24       	eor	r1, r1
     f5e:	30 19       	sub	r19, r0
     f60:	30 5d       	subi	r19, 0xD0	; 208
     f62:	31 93       	st	Z+, r19
     f64:	de f6       	brtc	.-74     	; 0xf1c <__ultoa_invert+0xe>
     f66:	cf 01       	movw	r24, r30
     f68:	08 95       	ret
     f6a:	46 2f       	mov	r20, r22
     f6c:	47 70       	andi	r20, 0x07	; 7
     f6e:	40 5d       	subi	r20, 0xD0	; 208
     f70:	41 93       	st	Z+, r20
     f72:	b3 e0       	ldi	r27, 0x03	; 3
     f74:	0f d0       	rcall	.+30     	; 0xf94 <__ultoa_invert+0x86>
     f76:	c9 f7       	brne	.-14     	; 0xf6a <__ultoa_invert+0x5c>
     f78:	f6 cf       	rjmp	.-20     	; 0xf66 <__ultoa_invert+0x58>
     f7a:	46 2f       	mov	r20, r22
     f7c:	4f 70       	andi	r20, 0x0F	; 15
     f7e:	40 5d       	subi	r20, 0xD0	; 208
     f80:	4a 33       	cpi	r20, 0x3A	; 58
     f82:	18 f0       	brcs	.+6      	; 0xf8a <__ultoa_invert+0x7c>
     f84:	49 5d       	subi	r20, 0xD9	; 217
     f86:	31 fd       	sbrc	r19, 1
     f88:	40 52       	subi	r20, 0x20	; 32
     f8a:	41 93       	st	Z+, r20
     f8c:	02 d0       	rcall	.+4      	; 0xf92 <__ultoa_invert+0x84>
     f8e:	a9 f7       	brne	.-22     	; 0xf7a <__ultoa_invert+0x6c>
     f90:	ea cf       	rjmp	.-44     	; 0xf66 <__ultoa_invert+0x58>
     f92:	b4 e0       	ldi	r27, 0x04	; 4
     f94:	a6 95       	lsr	r26
     f96:	97 95       	ror	r25
     f98:	87 95       	ror	r24
     f9a:	77 95       	ror	r23
     f9c:	67 95       	ror	r22
     f9e:	ba 95       	dec	r27
     fa0:	c9 f7       	brne	.-14     	; 0xf94 <__ultoa_invert+0x86>
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	61 05       	cpc	r22, r1
     fa6:	71 05       	cpc	r23, r1
     fa8:	08 95       	ret
     faa:	9b 01       	movw	r18, r22
     fac:	ac 01       	movw	r20, r24
     fae:	0a 2e       	mov	r0, r26
     fb0:	06 94       	lsr	r0
     fb2:	57 95       	ror	r21
     fb4:	47 95       	ror	r20
     fb6:	37 95       	ror	r19
     fb8:	27 95       	ror	r18
     fba:	ba 95       	dec	r27
     fbc:	c9 f7       	brne	.-14     	; 0xfb0 <__ultoa_invert+0xa2>
     fbe:	62 0f       	add	r22, r18
     fc0:	73 1f       	adc	r23, r19
     fc2:	84 1f       	adc	r24, r20
     fc4:	95 1f       	adc	r25, r21
     fc6:	a0 1d       	adc	r26, r0
     fc8:	08 95       	ret

00000fca <__prologue_saves__>:
     fca:	2f 92       	push	r2
     fcc:	3f 92       	push	r3
     fce:	4f 92       	push	r4
     fd0:	5f 92       	push	r5
     fd2:	6f 92       	push	r6
     fd4:	7f 92       	push	r7
     fd6:	8f 92       	push	r8
     fd8:	9f 92       	push	r9
     fda:	af 92       	push	r10
     fdc:	bf 92       	push	r11
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	ca 1b       	sub	r28, r26
     ff4:	db 0b       	sbc	r29, r27
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	09 94       	ijmp

00001002 <__epilogue_restores__>:
    1002:	2a 88       	ldd	r2, Y+18	; 0x12
    1004:	39 88       	ldd	r3, Y+17	; 0x11
    1006:	48 88       	ldd	r4, Y+16	; 0x10
    1008:	5f 84       	ldd	r5, Y+15	; 0x0f
    100a:	6e 84       	ldd	r6, Y+14	; 0x0e
    100c:	7d 84       	ldd	r7, Y+13	; 0x0d
    100e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1010:	9b 84       	ldd	r9, Y+11	; 0x0b
    1012:	aa 84       	ldd	r10, Y+10	; 0x0a
    1014:	b9 84       	ldd	r11, Y+9	; 0x09
    1016:	c8 84       	ldd	r12, Y+8	; 0x08
    1018:	df 80       	ldd	r13, Y+7	; 0x07
    101a:	ee 80       	ldd	r14, Y+6	; 0x06
    101c:	fd 80       	ldd	r15, Y+5	; 0x05
    101e:	0c 81       	ldd	r16, Y+4	; 0x04
    1020:	1b 81       	ldd	r17, Y+3	; 0x03
    1022:	aa 81       	ldd	r26, Y+2	; 0x02
    1024:	b9 81       	ldd	r27, Y+1	; 0x01
    1026:	ce 0f       	add	r28, r30
    1028:	d1 1d       	adc	r29, r1
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	ed 01       	movw	r28, r26
    1036:	08 95       	ret

00001038 <_exit>:
    1038:	f8 94       	cli

0000103a <__stop_program>:
    103a:	ff cf       	rjmp	.-2      	; 0x103a <__stop_program>
